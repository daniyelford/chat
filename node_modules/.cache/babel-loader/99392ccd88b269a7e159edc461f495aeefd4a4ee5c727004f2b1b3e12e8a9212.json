{"ast":null,"code":"import { createElementVNode as _createElementVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"section\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"section\"\n};\nimport { ref, watch } from 'vue';\nimport RadioGroup from '@/components/tooles/news/address/RadioGroup.vue';\nimport MapPicker from '@/components/tooles/news/address/MapPicker.vue';\nimport { fullAddress } from '@/utils/geo';\nexport default {\n  __name: 'AddressSelector ',\n  props: {\n    loginCity: String,\n    modelValue: Object\n  },\n  emits: ['update'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const emit = __emit;\n    const props = __props;\n    const addressModes = [{\n      id: 'city',\n      label: 'شهر فعلی ' + loginCity.value\n    }, {\n      id: 'location',\n      label: 'انتخاب از نقشه'\n    }, {\n      id: 'manual',\n      label: 'آدرس کامل'\n    }];\n    const selectedMode = ref(props.modelValue?.type || 'city');\n    const manualAddress = ref(props.modelValue?.value || '');\n    const location = ref(props.modelValue?.value || {\n      lat: '',\n      lng: ''\n    });\n    const loading = ref(false);\n    const handleMapSelect = async ({\n      lat,\n      lng\n    }) => {\n      location.value = {\n        lat,\n        lng\n      };\n      loading.value = true;\n      try {\n        const result = await fullAddress(lat, lng);\n        location.value.address = result.display_name;\n        emit('update', {\n          type: 'location',\n          value: location.value\n        });\n      } catch (e) {\n        location.value.address = 'خطا در دریافت آدرس';\n      } finally {\n        loading.value = false;\n      }\n    };\n    watch([selectedMode, manualAddress, location], () => {\n      let value = null;\n      if (selectedMode.value === 'city') {\n        value = {\n          type: 'city',\n          value: props.loginCity\n        };\n      } else if (selectedMode.value === 'location') {\n        value = {\n          type: 'location',\n          value: location.value\n        };\n      } else if (selectedMode.value === 'manual') {\n        value = {\n          type: 'manual',\n          value: manualAddress.value\n        };\n      }\n      emit('update', value);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n        class: \"address-label\"\n      }, \"نوع آدرس:\", -1)), _createVNode(RadioGroup, {\n        modelValue: selectedMode.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => selectedMode.value = $event),\n        options: addressModes,\n        name: \"address-mode\"\n      }, null, 8, [\"modelValue\"]), selectedMode.value === 'location' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n        class: \"text\"\n      }, \"موقعیت مکانی:\", -1)), _createVNode(MapPicker, {\n        onPick: handleMapSelect\n      }), loading.value ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"در حال دریافت آدرس از نقشه...\")) : location.value.address ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"آدرس انتخاب‌شده: \" + _toDisplayString(location.value.address), 1)) : _createCommentVNode(\"\", true)])) : _createCommentVNode(\"\", true), selectedMode.value === 'manual' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n        class: \"text\"\n      }, \"آدرس کامل:\", -1)), _withDirectives(_createElementVNode(\"textarea\", {\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => manualAddress.value = $event),\n        rows: \"3\",\n        class: \"textarea\",\n        placeholder: \"آدرس را وارد کنید...\"\n      }, null, 512), [[_vModelText, manualAddress.value]])])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","RadioGroup","MapPicker","fullAddress","emit","__emit","props","__props","addressModes","id","label","loginCity","value","selectedMode","modelValue","type","manualAddress","location","lat","lng","loading","handleMapSelect","result","address","display_name","e"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/news/AddressSelector .vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label class=\"address-label\">نوع آدرس:</label>\r\n    <RadioGroup\r\n      v-model=\"selectedMode\"\r\n      :options=\"addressModes\"\r\n      name=\"address-mode\"\r\n    />\r\n    <div class=\"section\" v-if=\"selectedMode === 'location'\">\r\n      <label class=\"text\">موقعیت مکانی:</label>\r\n      <MapPicker @pick=\"handleMapSelect\" />\r\n      <p v-if=\"loading\">در حال دریافت آدرس از نقشه...</p>\r\n      <p v-else-if=\"location.address\">آدرس انتخاب‌شده: {{ location.address }}</p>\r\n    </div>\r\n    <div class=\"section\" v-if=\"selectedMode === 'manual'\">\r\n      <label class=\"text\">آدرس کامل:</label>\r\n      <textarea v-model=\"manualAddress\" rows=\"3\" class=\"textarea\" placeholder=\"آدرس را وارد کنید...\"></textarea>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, defineEmits, defineProps } from 'vue'\r\nimport RadioGroup from '@/components/tooles/news/address/RadioGroup.vue'\r\nimport MapPicker from '@/components/tooles/news/address/MapPicker.vue'\r\nimport { fullAddress } from '@/utils/geo'\r\nconst emit = defineEmits(['update'])\r\nconst props = defineProps({\r\n  loginCity: String,\r\n  modelValue: Object,\r\n})\r\nconst addressModes = [\r\n  { id: 'city', label: 'شهر فعلی '+loginCity.value },\r\n  { id: 'location', label: 'انتخاب از نقشه' },\r\n  { id: 'manual', label: 'آدرس کامل' },\r\n]\r\nconst selectedMode = ref(props.modelValue?.type || 'city')\r\nconst manualAddress = ref(props.modelValue?.value || '')\r\nconst location = ref(props.modelValue?.value || { lat: '', lng: '' })\r\nconst loading = ref(false)\r\nconst handleMapSelect = async ({ lat, lng }) => {\r\n  location.value = { lat, lng }\r\n  loading.value = true\r\n  try {\r\n    const result = await fullAddress(lat, lng)\r\n    location.value.address = result.display_name\r\n    emit('update', { type: 'location', value: location.value })\r\n  } catch (e) {\r\n    location.value.address = 'خطا در دریافت آدرس'\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\nwatch([selectedMode, manualAddress, location], () => {\r\n  let value = null\r\n  if (selectedMode.value === 'city') {\r\n    value = { type: 'city', value: props.loginCity }\r\n  } else if (selectedMode.value === 'location') {\r\n    value = { type: 'location', value: location.value }\r\n  } else if (selectedMode.value === 'manual') {\r\n    value = { type: 'manual', value: manualAddress.value }\r\n  }\r\n  emit('update', value)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n  .address-label {\r\n    font-weight: bold;\r\n    margin-bottom: 0.5rem;\r\n    display: block;\r\n  }\r\n  .section {\r\n    margin-top: 1rem;\r\n  }\r\n  .text {\r\n    font-size: 0.875rem;\r\n    margin-bottom: 0.25rem;\r\n    display: block;\r\n  }\r\n  .input {\r\n    border: 1px solid #ccc;\r\n    border-radius: 0.375rem;\r\n    padding: 0.5rem;\r\n    width: 100%;\r\n    margin-top: 0.25rem;\r\n  }\r\n  .textarea {\r\n    border: 1px solid #ccc;\r\n    border-radius: 0.375rem;\r\n    padding: 0.5rem;\r\n    width: 100%;\r\n    resize: vertical;\r\n  }\r\n</style>"],"mappings":";;;;;;;;;;;;;;;AAsBA,SAASA,GAAG,EAAEC,KAA+B,QAAQ,KAAK;AAC1D,OAAOC,UAAU,MAAM,iDAAiD;AACxE,OAAOC,SAAS,MAAM,gDAAgD;AACtE,SAASC,WAAW,QAAQ,aAAa;;;;;;;;;;;IACzC,MAAMC,IAAI,GAAGC,MAAuB;IACpC,MAAMC,KAAK,GAAGC,OAGZ;IACF,MAAMC,YAAY,GAAG,CACnB;MAAEC,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,WAAW,GAACC,SAAS,CAACC;IAAM,CAAC,EAClD;MAAEH,EAAE,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAiB,CAAC,EAC3C;MAAED,EAAE,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAY,CAAC,CACrC;IACD,MAAMG,YAAY,GAAGd,GAAG,CAACO,KAAK,CAACQ,UAAU,EAAEC,IAAI,IAAI,MAAM,CAAC;IAC1D,MAAMC,aAAa,GAAGjB,GAAG,CAACO,KAAK,CAACQ,UAAU,EAAEF,KAAK,IAAI,EAAE,CAAC;IACxD,MAAMK,QAAQ,GAAGlB,GAAG,CAACO,KAAK,CAACQ,UAAU,EAAEF,KAAK,IAAI;MAAEM,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC,CAAC;IACrE,MAAMC,OAAO,GAAGrB,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMsB,eAAe,GAAG,MAAAA,CAAO;MAAEH,GAAG;MAAEC;IAAI,CAAC,KAAK;MAC9CF,QAAQ,CAACL,KAAK,GAAG;QAAEM,GAAG;QAAEC;MAAI,CAAC;MAC7BC,OAAO,CAACR,KAAK,GAAG,IAAI;MACpB,IAAI;QACF,MAAMU,MAAM,GAAG,MAAMnB,WAAW,CAACe,GAAG,EAAEC,GAAG,CAAC;QAC1CF,QAAQ,CAACL,KAAK,CAACW,OAAO,GAAGD,MAAM,CAACE,YAAY;QAC5CpB,IAAI,CAAC,QAAQ,EAAE;UAAEW,IAAI,EAAE,UAAU;UAAEH,KAAK,EAAEK,QAAQ,CAACL;QAAM,CAAC,CAAC;MAC7D,CAAC,CAAC,OAAOa,CAAC,EAAE;QACVR,QAAQ,CAACL,KAAK,CAACW,OAAO,GAAG,oBAAoB;MAC/C,CAAC,SAAS;QACRH,OAAO,CAACR,KAAK,GAAG,KAAK;MACvB;IACF,CAAC;IACDZ,KAAK,CAAC,CAACa,YAAY,EAAEG,aAAa,EAAEC,QAAQ,CAAC,EAAE,MAAM;MACnD,IAAIL,KAAK,GAAG,IAAI;MAChB,IAAIC,YAAY,CAACD,KAAK,KAAK,MAAM,EAAE;QACjCA,KAAK,GAAG;UAAEG,IAAI,EAAE,MAAM;UAAEH,KAAK,EAAEN,KAAK,CAACK;QAAU,CAAC;MAClD,CAAC,MAAM,IAAIE,YAAY,CAACD,KAAK,KAAK,UAAU,EAAE;QAC5CA,KAAK,GAAG;UAAEG,IAAI,EAAE,UAAU;UAAEH,KAAK,EAAEK,QAAQ,CAACL;QAAM,CAAC;MACrD,CAAC,MAAM,IAAIC,YAAY,CAACD,KAAK,KAAK,QAAQ,EAAE;QAC1CA,KAAK,GAAG;UAAEG,IAAI,EAAE,QAAQ;UAAEH,KAAK,EAAEI,aAAa,CAACJ;QAAM,CAAC;MACxD;MACAR,IAAI,CAAC,QAAQ,EAAEQ,KAAK,CAAC;IACvB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}