{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { defineStore } from 'pinia';\nimport { sendApi } from '@/utils/api';\nimport { useUserStore } from '@/stores/user';\nexport const useNotificationStore = defineStore('notification', {\n  state: () => ({\n    notifications: [],\n    unreadCount: 0,\n    lastId: 0\n  }),\n  actions: {\n    async fetchNotifications({\n      limit = 10,\n      offset = 0\n    } = {}) {\n      const userStore = useUserStore();\n      if (!userStore.isLoggedIn) return [];\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user',\n        data: {\n          limit,\n          offset\n        }\n      });\n      if (res.status === 'success' && res.data?.data) {\n        const data = res.data.data;\n        const unread = data.filter(n => n.is_read === 'dont');\n        this.unreadCount = unread.length;\n        this.lastId = Math.max(0, ...data.map(n => parseInt(n.id)));\n        return data;\n      }\n      return [];\n    },\n    markAsRead(id) {\n      const notif = this.notifications.find(n => n.id === id);\n      if (notif && notif.is_read === 'dont') {\n        notif.is_read = 'seen';\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length;\n        sendApi({\n          action: 'read_notifications',\n          control: 'user',\n          data: id\n        });\n      }\n    },\n    pushNotification(notif) {\n      const exists = this.notifications.some(n => n.id === notif.id);\n      if (!exists) {\n        this.notifications.unshift(notif);\n        if (notif.is_read === 'dont') this.unreadCount++;\n        this.lastId = Math.max(this.lastId, parseInt(notif.id));\n      }\n    }\n  },\n  persist: true\n});","map":{"version":3,"names":["defineStore","sendApi","useUserStore","useNotificationStore","state","notifications","unreadCount","lastId","actions","fetchNotifications","limit","offset","userStore","isLoggedIn","res","action","control","data","status","unread","filter","n","is_read","length","Math","max","map","parseInt","id","markAsRead","notif","find","pushNotification","exists","some","unshift","persist"],"sources":["D:/GitHub/ci3-vue3/vue3/src/stores/notification.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { sendApi } from '@/utils/api'\r\nimport { useUserStore } from '@/stores/user'\r\n\r\nexport const useNotificationStore = defineStore('notification', {\r\n  state: () => ({\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    lastId: 0,\r\n  }),\r\n  actions: {\r\n    async fetchNotifications({ limit = 10, offset = 0 } = {}) {\r\n      const userStore = useUserStore()\r\n      if (!userStore.isLoggedIn) return []\r\n\r\n      const res = await sendApi({ action: 'get_notifications', control: 'user', data: { limit, offset } })\r\n\r\n      if (res.status === 'success' && res.data?.data) {\r\n        const data = res.data.data\r\n        const unread = data.filter(n => n.is_read === 'dont')\r\n        this.unreadCount = unread.length\r\n\r\n        this.lastId = Math.max(0, ...data.map(n => parseInt(n.id)))\r\n\r\n        return data\r\n      }\r\n      return []\r\n    },\r\n\r\n    markAsRead(id) {\r\n      const notif = this.notifications.find(n => n.id === id)\r\n      if (notif && notif.is_read === 'dont') {\r\n        notif.is_read = 'seen'\r\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length\r\n\r\n        sendApi({\r\n          action: 'read_notifications',\r\n          control: 'user',\r\n          data: id\r\n        })\r\n      }\r\n    },\r\n\r\n    pushNotification(notif) {\r\n      const exists = this.notifications.some(n => n.id === notif.id)\r\n      if (!exists) {\r\n        this.notifications.unshift(notif)\r\n        if (notif.is_read === 'dont') this.unreadCount++\r\n        this.lastId = Math.max(this.lastId, parseInt(notif.id))\r\n      }\r\n    }\r\n  },\r\n  persist: true\r\n})"],"mappings":";;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAY,QAAQ,eAAe;AAE5C,OAAO,MAAMC,oBAAoB,GAAGH,WAAW,CAAC,cAAc,EAAE;EAC9DI,KAAK,EAAEA,CAAA,MAAO;IACZC,aAAa,EAAE,EAAE;IACjBC,WAAW,EAAE,CAAC;IACdC,MAAM,EAAE;EACV,CAAC,CAAC;EACFC,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAC;MAAEC,KAAK,GAAG,EAAE;MAAEC,MAAM,GAAG;IAAE,CAAC,GAAG,CAAC,CAAC,EAAE;MACxD,MAAMC,SAAS,GAAGV,YAAY,CAAC,CAAC;MAChC,IAAI,CAACU,SAAS,CAACC,UAAU,EAAE,OAAO,EAAE;MAEpC,MAAMC,GAAG,GAAG,MAAMb,OAAO,CAAC;QAAEc,MAAM,EAAE,mBAAmB;QAAEC,OAAO,EAAE,MAAM;QAAEC,IAAI,EAAE;UAAEP,KAAK;UAAEC;QAAO;MAAE,CAAC,CAAC;MAEpG,IAAIG,GAAG,CAACI,MAAM,KAAK,SAAS,IAAIJ,GAAG,CAACG,IAAI,EAAEA,IAAI,EAAE;QAC9C,MAAMA,IAAI,GAAGH,GAAG,CAACG,IAAI,CAACA,IAAI;QAC1B,MAAME,MAAM,GAAGF,IAAI,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAK,MAAM,CAAC;QACrD,IAAI,CAAChB,WAAW,GAAGa,MAAM,CAACI,MAAM;QAEhC,IAAI,CAAChB,MAAM,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAGR,IAAI,CAACS,GAAG,CAACL,CAAC,IAAIM,QAAQ,CAACN,CAAC,CAACO,EAAE,CAAC,CAAC,CAAC;QAE3D,OAAOX,IAAI;MACb;MACA,OAAO,EAAE;IACX,CAAC;IAEDY,UAAUA,CAACD,EAAE,EAAE;MACb,MAAME,KAAK,GAAG,IAAI,CAACzB,aAAa,CAAC0B,IAAI,CAACV,CAAC,IAAIA,CAAC,CAACO,EAAE,KAAKA,EAAE,CAAC;MACvD,IAAIE,KAAK,IAAIA,KAAK,CAACR,OAAO,KAAK,MAAM,EAAE;QACrCQ,KAAK,CAACR,OAAO,GAAG,MAAM;QACtB,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACD,aAAa,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAK,MAAM,CAAC,CAACC,MAAM;QAE9EtB,OAAO,CAAC;UACNc,MAAM,EAAE,oBAAoB;UAC5BC,OAAO,EAAE,MAAM;UACfC,IAAI,EAAEW;QACR,CAAC,CAAC;MACJ;IACF,CAAC;IAEDI,gBAAgBA,CAACF,KAAK,EAAE;MACtB,MAAMG,MAAM,GAAG,IAAI,CAAC5B,aAAa,CAAC6B,IAAI,CAACb,CAAC,IAAIA,CAAC,CAACO,EAAE,KAAKE,KAAK,CAACF,EAAE,CAAC;MAC9D,IAAI,CAACK,MAAM,EAAE;QACX,IAAI,CAAC5B,aAAa,CAAC8B,OAAO,CAACL,KAAK,CAAC;QACjC,IAAIA,KAAK,CAACR,OAAO,KAAK,MAAM,EAAE,IAAI,CAAChB,WAAW,EAAE;QAChD,IAAI,CAACC,MAAM,GAAGiB,IAAI,CAACC,GAAG,CAAC,IAAI,CAAClB,MAAM,EAAEoB,QAAQ,CAACG,KAAK,CAACF,EAAE,CAAC,CAAC;MACzD;IACF;EACF,CAAC;EACDQ,OAAO,EAAE;AACX,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}