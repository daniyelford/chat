{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notification-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nimport { sendApi } from '@/utils/api';\nimport moment from 'moment-jalaali';\nexport default {\n  __name: 'NotificationList',\n  props: {\n    notifications: Array\n  },\n  emits: ['update'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const props = __props;\n    const emit = __emit;\n    function formatDate(date) {\n      return moment(date).format('jYYYY/jMM/jDD HH:mm');\n    }\n    async function markAsRead(id) {\n      const res = await sendApi({\n        action: 'read_notifications',\n        control: 'user',\n        data: id\n      });\n      if (res.status === 'success') {\n        emit('update', id);\n      }\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", null, \"نوتیفیکیشن‌ها\", -1)), __props.notifications.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"نوتیفیکیشنی وجود ندارد.\")) : _createCommentVNode(\"\", true), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(props.notifications, notif => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: notif.id,\n          class: _normalizeClass({\n            unread: !notif.is_read\n          }),\n          onClick: $event => markAsRead(notif.id)\n        }, [_createElementVNode(\"strong\", null, _toDisplayString(notif.title), 1), _createElementVNode(\"p\", null, _toDisplayString(notif.body), 1), _createElementVNode(\"small\", null, _toDisplayString(formatDate(notif.created_at)), 1)], 10, _hoisted_3);\n      }), 128))])]);\n    };\n  }\n};","map":{"version":3,"names":["sendApi","moment","props","__props","emit","__emit","formatDate","date","format","markAsRead","id","res","action","control","data","status"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/NotificationList.vue"],"sourcesContent":["<template>\r\n    <div class=\"notification-list\">\r\n        <h3>نوتیفیکیشن‌ها</h3>\r\n        <div v-if=\"notifications.length === 0\">نوتیفیکیشنی وجود ندارد.</div>\r\n        <ul>\r\n            <li v-for=\"notif in props.notifications\"\r\n            :key=\"notif.id\"\r\n            :class=\"{ unread: !notif.is_read }\"\r\n            @click=\"markAsRead(notif.id)\">\r\n                <strong>{{ notif.title }}</strong>\r\n                <p>{{ notif.body }}</p>\r\n                <small>{{ formatDate(notif.created_at) }}</small>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n<script setup>\r\n    import { defineProps ,defineEmits } from 'vue'\r\n    import { sendApi } from '@/utils/api'\r\n    import moment from 'moment-jalaali'\r\n    const props = defineProps({\r\n        notifications: Array,\r\n    })\r\n    const emit = defineEmits(['update'])\r\n    function formatDate(date) { return moment(date).format('jYYYY/jMM/jDD HH:mm')}\r\n    async function markAsRead(id) {\r\n        const res = await sendApi({ action: 'read_notifications', control: 'user', data: id })\r\n        if (res.status === 'success') {\r\n           emit('update', id)\r\n        }\r\n    }\r\n</script>\r\n<style scoped>\r\n    .notification-list {\r\n        padding: 1rem;\r\n        max-height: 400px;\r\n        overflow-y: auto;\r\n    }\r\n    .notification-list ul {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    .notification-list li {\r\n        padding: 10px;\r\n        margin-bottom: 5px;\r\n        background-color: white;\r\n        border-bottom: 1px solid #ddd;\r\n        cursor: pointer;\r\n        transition: background 0.3s;\r\n    }\r\n    .notification-list li.unread {\r\n        background-color: #c4f511;\r\n        font-weight: bold;\r\n    }\r\n    .notification-list li:hover {\r\n        background-color: #eef;\r\n    }\r\n</style>\r\n"],"mappings":";;;;;;;;AAkBI,SAASA,OAAO,QAAQ,aAAa;AACrC,OAAOC,MAAM,MAAM,gBAAgB;;;;;;;;;;IACnC,MAAMC,KAAK,GAAGC,OAEZ;IACF,MAAMC,IAAI,GAAGC,MAAuB;IACpC,SAASC,UAAUA,CAACC,IAAI,EAAE;MAAE,OAAON,MAAM,CAACM,IAAI,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;IAAA;IAC7E,eAAeC,UAAUA,CAACC,EAAE,EAAE;MAC1B,MAAMC,GAAG,GAAG,MAAMX,OAAO,CAAC;QAAEY,MAAM,EAAE,oBAAoB;QAAEC,OAAO,EAAE,MAAM;QAAEC,IAAI,EAAEJ;MAAG,CAAC,CAAC;MACtF,IAAIC,GAAG,CAACI,MAAM,KAAK,SAAS,EAAE;QAC3BX,IAAI,CAAC,QAAQ,EAAEM,EAAE,CAAC;MACrB;IACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}