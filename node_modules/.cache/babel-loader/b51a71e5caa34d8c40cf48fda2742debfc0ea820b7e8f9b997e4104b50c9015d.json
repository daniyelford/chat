{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notification-wrapper\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"dropdown\"\n};\nimport { ref, onMounted } from 'vue';\nimport NotificationList from '@/components/tooles/nav/NotificationList.vue';\nimport { sendApi } from '@/utils/api';\nimport { BASE_URL } from '@/config';\nexport default {\n  __name: 'NotificationMenu',\n  setup(__props) {\n    const logo = BASE_URL + '/assets/images/logo.png';\n    const song = BASE_URL + '/assets/song/notif.mp3';\n    const showList = ref(false);\n    const unreadCount = ref(0);\n    const lastNotificationId = ref(0);\n    const notifSound = ref(null);\n    const notifications = ref([]);\n    function toggleList() {\n      showList.value = !showList.value;\n    }\n    function playSound() {\n      notifSound.value?.play().catch(() => {});\n    }\n    function showNativeNotification(title, body) {\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(title, {\n          body,\n          icon: logo\n        });\n        notification.onclick = () => {\n          window.focus();\n          notification.close();\n        };\n      }\n    }\n    function markAsRead(id) {\n      const notif = notifications.value.find(n => n.id === id);\n      if (notif && !notif.is_read) {\n        notif.is_read = 1;\n        notif.read_at = new Date().toISOString();\n        unreadCount.value = notifications.value.filter(n => !n.is_read).length;\n      }\n    }\n    async function pollNotifications() {\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user'\n      });\n      if (res.status === 'success' && Array.isArray(res.data)) {\n        notifications.value = res.data;\n        unreadCount.value = res.data.filter(n => !n.is_read).length;\n        for (const notif of res.data) {\n          if (notif.id > lastNotificationId.value) {\n            lastNotificationId.value = notif.id;\n            playSound();\n            showNativeNotification(notif.title, notif.body);\n          }\n        }\n      }\n    }\n    onMounted(() => {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n      pollNotifications();\n      setInterval(pollNotifications, 10000);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n        class: \"icon-wrapper\",\n        onClick: toggleList\n      }, [_cache[0] || (_cache[0] = _createTextVNode(\" ðŸ”” \")), unreadCount.value > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(unreadCount.value), 1)) : _createCommentVNode(\"\", true)]), showList.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(NotificationList, {\n        notifications: notifications.value,\n        onUpdate: markAsRead\n      }, null, 8, [\"notifications\"])])) : _createCommentVNode(\"\", true), _createElementVNode(\"audio\", {\n        ref_key: \"notifSound\",\n        ref: notifSound,\n        src: song,\n        preload: \"auto\"\n      }, null, 512)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","NotificationList","sendApi","BASE_URL","logo","song","showList","unreadCount","lastNotificationId","notifSound","notifications","toggleList","value","playSound","play","catch","showNativeNotification","title","body","Notification","permission","notification","icon","onclick","window","focus","close","markAsRead","id","notif","find","n","is_read","read_at","Date","toISOString","filter","length","pollNotifications","res","action","control","status","Array","isArray","data","requestPermission","setInterval"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/NotificationMenu.vue"],"sourcesContent":["<template>\r\n    <div class=\"notification-wrapper\">\r\n        <div class=\"icon-wrapper\" @click=\"toggleList\">\r\n            ðŸ””\r\n            <span class=\"badge\" v-if=\"unreadCount > 0\">{{ unreadCount }}</span>\r\n        </div>\r\n        <div class=\"dropdown\" v-if=\"showList\">\r\n            <NotificationList :notifications=\"notifications\" @update=\"markAsRead\"/>\r\n        </div>\r\n        <audio ref=\"notifSound\" :src=\"song\" preload=\"auto\"></audio>\r\n    </div>\r\n</template>\r\n<script setup>\r\n    import { ref, onMounted } from 'vue'\r\n    import NotificationList from '@/components/tooles/nav/NotificationList.vue'\r\n    import { sendApi } from '@/utils/api'\r\n    import { BASE_URL } from '@/config';\r\n    const logo = BASE_URL+'/assets/images/logo.png'\r\n    const song = BASE_URL+'/assets/song/notif.mp3'\r\n    const showList = ref(false)\r\n    const unreadCount = ref(0)\r\n    const lastNotificationId = ref(0)\r\n    const notifSound = ref(null)\r\n    const notifications = ref([])\r\n    function toggleList() {\r\n        showList.value = !showList.value\r\n    }\r\n    function playSound() {\r\n        notifSound.value?.play().catch(() => {})\r\n    }\r\n    function showNativeNotification(title, body) {\r\n        if (Notification.permission === 'granted') {\r\n            const notification = new Notification(title, {\r\n                body,\r\n                icon: logo\r\n            })\r\n            notification.onclick = () => {\r\n                window.focus()\r\n                notification.close()\r\n            }\r\n        }\r\n    }\r\n    function markAsRead(id) {\r\n        const notif = notifications.value.find((n) => n.id === id)\r\n        if (notif && !notif.is_read) {\r\n            notif.is_read = 1\r\n            notif.read_at = new Date().toISOString()\r\n\r\n            unreadCount.value = notifications.value.filter((n) => !n.is_read).length\r\n        }\r\n    }\r\n    async function pollNotifications() {\r\n        const res = await sendApi({ action: 'get_notifications', control: 'user' })\r\n        if (res.status === 'success' && Array.isArray(res.data)) {\r\n            notifications.value = res.data\r\n            unreadCount.value = res.data.filter(n => !n.is_read).length\r\n            for (const notif of res.data) {\r\n                if (notif.id > lastNotificationId.value) {\r\n                    lastNotificationId.value = notif.id\r\n                    playSound()\r\n                    showNativeNotification(notif.title, notif.body)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onMounted(() => {\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission()\r\n        }\r\n        pollNotifications()\r\n        setInterval(pollNotifications, 10000)\r\n    })\r\n</script>\r\n<style scoped>\r\n    .notification-wrapper {\r\n        position: relative;\r\n        display: inline-block;\r\n    }\r\n    .icon-wrapper {\r\n        position: relative;\r\n        font-size: 24px;\r\n        cursor: pointer;\r\n    }\r\n    .badge {\r\n        position: absolute;\r\n        top: -6px;\r\n        right: -6px;\r\n        background-color: red;\r\n        color: white;\r\n        border-radius: 50%;\r\n        padding: 2px 6px;\r\n        font-size: 12px;\r\n    }\r\n    .dropdown {\r\n        position: absolute;\r\n        top: 35px;\r\n        right: 0;\r\n        width: 300px;\r\n        background: white;\r\n        border-radius: 10px;\r\n        box-shadow: 0 0 5px rgba(0,0,0,0.2);\r\n        z-index: 10;\r\n    }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}