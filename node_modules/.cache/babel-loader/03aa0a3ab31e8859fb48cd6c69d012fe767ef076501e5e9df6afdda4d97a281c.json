{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-box\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"progress-message\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"uploaded-list\"\n};\nconst _hoisted_4 = [\"href\"];\nimport { ref, mergeProps } from 'vue';\nimport { sendApi } from '@/utils/api';\nconst MAX_FILE_SIZE_MB = 10;\nexport default {\n  __name: 'UploadManyPdfs',\n  props: {\n    toAction: String,\n    url: String\n  },\n  setup(__props) {\n    const props = __props;\n    const selectedFiles = ref([]);\n    const uploadedFiles = ref([]);\n    const uploading = ref(false);\n    const onFilesChange = async e => {\n      const files = Array.from(e.target.files);\n      selectedFiles.value = [];\n      for (const file of files) {\n        const sizeInMB = file.size / (1024 * 1024);\n        if (sizeInMB > MAX_FILE_SIZE_MB) {\n          alert(`فایل ${file.name} بیش از ${MAX_FILE_SIZE_MB}MB است و انتخاب نمی‌شود`);\n          continue;\n        }\n        selectedFiles.value.push(file);\n      }\n      e.target.value = '';\n      if (selectedFiles.value.length > 0) {\n        await uploadFiles();\n      }\n    };\n    const uploadFiles = async () => {\n      uploading.value = true;\n      uploadedFiles.value = [];\n      const fileDataArray = [];\n      for (const file of selectedFiles.value) {\n        try {\n          const base64 = await readFileAsBase64(file);\n          fileDataArray.push({\n            name: file.name,\n            content: base64\n          });\n        } catch {\n          alert(`خطا در خواندن فایل ${file.name}`);\n        }\n      }\n      try {\n        const response = await sendApi({\n          action: 'upload_many_pdfs',\n          data: {\n            data: fileDataArray,\n            url: mergeProps.url,\n            toAction: props.toAction\n          },\n          control: 'upload'\n        });\n        if (response.status === 'success' && Array.isArray(response.pdfs)) {\n          uploadedFiles.value = response.pdfs;\n          selectedFiles.value = [];\n        } else {\n          alert(response.message || 'آپلود دسته‌ای موفق نبود');\n        }\n      } catch (err) {\n        console.error('خطا در آپلود:', err);\n        alert('خطا در ارسال فایل‌ها');\n      } finally {\n        uploading.value = false;\n      }\n    };\n    const readFileAsBase64 = file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(new Error('خواندن فایل با خطا مواجه شد'));\n        reader.readAsDataURL(file);\n      });\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        multiple: \"\",\n        onChange: onFilesChange\n      }, null, 32), uploading.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"در حال آپلود...\")) : _createCommentVNode(\"\", true), uploadedFiles.value.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[0] || (_cache[0] = _createElementVNode(\"p\", null, \"PDFهای آپلودشده:\", -1)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(uploadedFiles.value, (file, index) => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: index\n        }, [_createElementVNode(\"a\", {\n          href: file.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, _toDisplayString(file.name), 9, _hoisted_4)]);\n      }), 128))])])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","mergeProps","sendApi","MAX_FILE_SIZE_MB","props","__props","selectedFiles","uploadedFiles","uploading","onFilesChange","e","files","Array","from","target","value","file","sizeInMB","size","alert","name","push","length","uploadFiles","fileDataArray","base64","readFileAsBase64","content","response","action","data","url","toAction","control","status","isArray","pdfs","message","err","console","error","Promise","resolve","reject","reader","FileReader","onload","result","onerror","Error","readAsDataURL"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/upload/UploadManyPdfs.vue"],"sourcesContent":["<template>\r\n  <div class=\"upload-box\">\r\n    <input type=\"file\" accept=\"application/pdf\" multiple @change=\"onFilesChange\" />\r\n\r\n    <div v-if=\"uploading\" class=\"progress-message\">در حال آپلود...</div>\r\n\r\n    <div v-if=\"uploadedFiles.length\" class=\"uploaded-list\">\r\n      <p>PDFهای آپلودشده:</p>\r\n      <ul>\r\n        <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\">\r\n          <a :href=\"file.url\" target=\"_blank\" rel=\"noopener noreferrer\">{{ file.name }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref,defineProps, mergeProps } from 'vue'\r\n  import { sendApi } from '@/utils/api'\r\n  const props = defineProps({\r\n    toAction: String,\r\n    url: String\r\n  })\r\n  const MAX_FILE_SIZE_MB = 10\r\n  const selectedFiles = ref([])\r\n  const uploadedFiles = ref([])\r\n  const uploading = ref(false)\r\n  const onFilesChange = async (e) => {\r\n    const files = Array.from(e.target.files)\r\n    selectedFiles.value = []\r\n    for (const file of files) {\r\n      const sizeInMB = file.size / (1024 * 1024)\r\n      if (sizeInMB > MAX_FILE_SIZE_MB) {\r\n        alert(`فایل ${file.name} بیش از ${MAX_FILE_SIZE_MB}MB است و انتخاب نمی‌شود`)\r\n        continue\r\n      }\r\n      selectedFiles.value.push(file)\r\n    }\r\n    e.target.value = ''\r\n    if (selectedFiles.value.length > 0) {\r\n      await uploadFiles()\r\n    }\r\n  }\r\n  const uploadFiles = async () => {\r\n    uploading.value = true\r\n    uploadedFiles.value = []\r\n    const fileDataArray = []\r\n    for (const file of selectedFiles.value) {\r\n      try {\r\n        const base64 = await readFileAsBase64(file)\r\n        fileDataArray.push({\r\n          name: file.name,\r\n          content: base64,\r\n        })\r\n      } catch {\r\n        alert(`خطا در خواندن فایل ${file.name}`)\r\n      }\r\n    }\r\n    try {\r\n      const response = await sendApi(\r\n        {\r\n          action: 'upload_many_pdfs',\r\n          data: { \r\n            data:fileDataArray,\r\n            url:mergeProps.url,\r\n            toAction:props.toAction\r\n          },\r\n          control:'upload'\r\n        }\r\n      )\r\n      if (response.status === 'success' && Array.isArray(response.pdfs)) {\r\n        uploadedFiles.value = response.pdfs\r\n        selectedFiles.value = []\r\n      } else {\r\n        alert(response.message || 'آپلود دسته‌ای موفق نبود')\r\n      }\r\n    } catch (err) {\r\n      console.error('خطا در آپلود:', err)\r\n      alert('خطا در ارسال فایل‌ها')\r\n    } finally {\r\n      uploading.value = false\r\n    }\r\n  }\r\n  const readFileAsBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader()\r\n      reader.onload = () => resolve(reader.result)\r\n      reader.onerror = () => reject(new Error('خواندن فایل با خطا مواجه شد'))\r\n      reader.readAsDataURL(file)\r\n    })\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.upload-box {\r\n  padding: 1rem;\r\n}\r\ninput[type=\"file\"] {\r\n  margin-bottom: 1rem;\r\n}\r\n.progress-message {\r\n  margin-top: 1rem;\r\n  color: #ff9800;\r\n}\r\n.uploaded-list {\r\n  margin-top: 1rem;\r\n}\r\n.uploaded-list ul {\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n.uploaded-list li {\r\n  margin: 0.3rem 0;\r\n}\r\n.uploaded-list a {\r\n  color: #4caf50;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n}\r\n.uploaded-list a:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}