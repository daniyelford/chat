{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport { sendApi } from '@/utils/api';\nexport const useWalletStore = defineStore('wallet', () => {\n  const transactions = ref([]);\n  const transactionsLoaded = ref(false);\n  const discountCards = ref([]);\n  const discountCardsLoaded = ref(false);\n  const loading = ref(false);\n  const cards = ref([]);\n  const withdrawals = ref([]);\n  const fetchWithdrawals = async () => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'get_withdrawals'\n    });\n    if (res.status === 'success') withdrawals.value = res.data || [];\n  };\n  const requestWithdrawal = async data => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'request_withdrawal',\n      data\n    });\n    if (res.status === 'success') await fetchWithdrawals();\n    return res;\n  };\n  const fetchCards = async () => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'get_cards'\n    });\n    if (res.status === 'success') cards.value = res.data || [];\n  };\n  const addCard = async data => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'add_card',\n      data\n    });\n    if (res.status === 'success') await fetchCards();\n    return res;\n  };\n  const deleteCard = async id => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'delete_card',\n      data: {\n        id\n      }\n    });\n    if (res.status === 'success') cards.value = cards.value.filter(c => c.id !== id);\n    return res;\n  };\n  const fetchTransactions = async ({\n    limit = 10,\n    offset = 0,\n    append = false\n  }) => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'get_transactions',\n      data: {\n        limit,\n        offset\n      }\n    });\n    // if (res.status === 'success') {\n    //     // this.cards = append ? [...this.cards, ...newCards] : [...newCards, ...this.cards]\n    //     // this.total = res.count_all\n    //     const newIds = res.data.map(i => i.id).sort()\n    //     const oldIds = transactions.value.map(i => i.id).sort()\n    //     if (JSON.stringify(newIds) !== JSON.stringify(oldIds)) {\n    //         transactions.value = res.data\n    //     }\n    //     transactionsLoaded.value = true\n    // }\n    if (res.status === 'success') {\n      const newTx = res.data || [];\n      if (append) {\n        const existingIds = new Set(transactions.value.map(tx => tx.id));\n        const merged = [...transactions.value];\n        for (const tx of newTx) {\n          if (!existingIds.has(tx.id)) merged.push(tx);\n        }\n        transactions.value = merged;\n      } else {\n        transactions.value = newTx;\n      }\n      transactionsLoaded.value = true;\n    }\n  };\n  const fetchDiscountCards = async () => {\n    const res = await sendApi({\n      control: 'wallet',\n      action: 'get_discount_cards'\n    });\n    if (res.status === 'success') {\n      const newIds = res.data.map(i => i.id).sort();\n      const oldIds = discountCards.value.map(i => i.id).sort();\n      if (JSON.stringify(newIds) !== JSON.stringify(oldIds)) {\n        discountCards.value = res.data;\n      }\n      discountCardsLoaded.value = true;\n    }\n  };\n  return {\n    transactions,\n    transactionsLoaded,\n    discountCards,\n    discountCardsLoaded,\n    loading,\n    cards,\n    withdrawals,\n    fetchWithdrawals,\n    requestWithdrawal,\n    fetchTransactions,\n    fetchDiscountCards,\n    fetchCards,\n    addCard,\n    deleteCard\n    // startPolling,\n    // stopPolling,\n  };\n});","map":{"version":3,"names":["defineStore","ref","sendApi","useWalletStore","transactions","transactionsLoaded","discountCards","discountCardsLoaded","loading","cards","withdrawals","fetchWithdrawals","res","control","action","status","value","data","requestWithdrawal","fetchCards","addCard","deleteCard","id","filter","c","fetchTransactions","limit","offset","append","newTx","existingIds","Set","map","tx","merged","has","push","fetchDiscountCards","newIds","i","sort","oldIds","JSON","stringify"],"sources":["D:/GitHub/ci3-vue3/vue3/src/stores/wallet.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { sendApi } from '@/utils/api'\r\nexport const useWalletStore = defineStore('wallet', () => {\r\n    const transactions = ref([])\r\n    const transactionsLoaded = ref(false)\r\n    const discountCards = ref([])\r\n    const discountCardsLoaded = ref(false)\r\n    const loading = ref(false)\r\n    const cards = ref([])\r\n    const withdrawals = ref([])\r\n    const fetchWithdrawals = async () => {\r\n        const res = await sendApi({ control: 'wallet', action: 'get_withdrawals' })\r\n        if (res.status === 'success') withdrawals.value = res.data || []\r\n    }\r\n    const requestWithdrawal = async (data) => {\r\n        const res = await sendApi({ control: 'wallet', action: 'request_withdrawal', data })\r\n        if (res.status === 'success') await fetchWithdrawals()\r\n        return res\r\n    }\r\n    const fetchCards = async () => {\r\n        const res = await sendApi({ control: 'wallet', action: 'get_cards' })\r\n        if (res.status === 'success') cards.value = res.data || []\r\n    }\r\n    const addCard = async (data) => {\r\n        const res = await sendApi({ control: 'wallet', action: 'add_card', data })\r\n        if (res.status === 'success') await fetchCards()\r\n        return res\r\n    }\r\n    const deleteCard = async (id) => {\r\n        const res = await sendApi({ control: 'wallet', action: 'delete_card', data: { id } })\r\n        if (res.status === 'success') cards.value = cards.value.filter(c => c.id !== id)\r\n        return res\r\n    }\r\n    const fetchTransactions = async ({ limit = 10, offset = 0, append = false }) => {\r\n        const res = await sendApi({ control: 'wallet', action: 'get_transactions' , data: { limit, offset } })\r\n        // if (res.status === 'success') {\r\n        //     // this.cards = append ? [...this.cards, ...newCards] : [...newCards, ...this.cards]\r\n        //     // this.total = res.count_all\r\n        //     const newIds = res.data.map(i => i.id).sort()\r\n        //     const oldIds = transactions.value.map(i => i.id).sort()\r\n        //     if (JSON.stringify(newIds) !== JSON.stringify(oldIds)) {\r\n        //         transactions.value = res.data\r\n        //     }\r\n        //     transactionsLoaded.value = true\r\n        // }\r\n        if (res.status === 'success') {\r\n            const newTx = res.data || []\r\n            if (append) {\r\n                const existingIds = new Set(transactions.value.map(tx => tx.id))\r\n                const merged = [...transactions.value]\r\n                for (const tx of newTx) {\r\n                    if (!existingIds.has(tx.id)) merged.push(tx)\r\n                }\r\n                transactions.value = merged\r\n            } else {\r\n                transactions.value = newTx\r\n            }\r\n            transactionsLoaded.value = true\r\n        }\r\n    }\r\n    const fetchDiscountCards = async () => {\r\n        const res = await sendApi({ control: 'wallet', action: 'get_discount_cards' })\r\n        if (res.status === 'success') {\r\n            const newIds = res.data.map(i => i.id).sort()\r\n            const oldIds = discountCards.value.map(i => i.id).sort()\r\n            if (JSON.stringify(newIds) !== JSON.stringify(oldIds)) {\r\n                discountCards.value = res.data\r\n            }\r\n            discountCardsLoaded.value = true\r\n        }\r\n    }\r\n    return {\r\n        transactions,\r\n        transactionsLoaded,\r\n        discountCards,\r\n        discountCardsLoaded,\r\n        loading,\r\n        cards,\r\n        withdrawals,\r\n        fetchWithdrawals,\r\n        requestWithdrawal,\r\n        fetchTransactions,\r\n        fetchDiscountCards,\r\n        fetchCards,\r\n        addCard,\r\n        deleteCard\r\n        // startPolling,\r\n        // stopPolling,\r\n    }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}