{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"mt-4\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"mt-4\"\n};\nconst _hoisted_4 = {\n  class: \"flex flex-wrap gap-4 justify-center\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  key: 2,\n  class: \"text-sm text-gray-600\"\n};\nconst _hoisted_8 = {\n  class: \"text-xs text-gray-400 truncate w-[100px] text-center\"\n};\nimport { ref } from 'vue';\nimport { sendApi } from '@/utils/api';\nexport default {\n  __name: 'UploaderManyMedia',\n  props: {\n    url: String,\n    toAction: String\n  },\n  emits: ['done'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const fileInput = ref(null);\n    const previews = ref([]);\n    const selectedFilesBase64 = ref([]);\n    const progress = ref(0);\n    const uploading = ref(false);\n    const props = __props;\n    const emit = __emit;\n    const handleDrop = e => {\n      const files = e.dataTransfer.files;\n      handleFiles({\n        target: {\n          files\n        }\n      });\n    };\n    const handleFiles = async e => {\n      const files = Array.from(e.target.files);\n      if (!files.length) return;\n      previews.value = [];\n      selectedFilesBase64.value = [];\n      uploading.value = true;\n      progress.value = 0;\n      let count = 0;\n      for (const file of files) {\n        await new Promise(resolve => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            const base64 = reader.result;\n            selectedFilesBase64.value.push(base64);\n            previews.value.push({\n              src: base64,\n              name: file.name,\n              isImage: file.type.startsWith('image/'),\n              isVideo: file.type.startsWith('video/')\n            });\n            count++;\n            progress.value = Math.round(count / files.length * 100);\n            resolve();\n          };\n          reader.readAsDataURL(file);\n        });\n      }\n      await uploadFiles();\n      uploading.value = false;\n    };\n    const uploadFiles = async () => {\n      try {\n        const response = await sendApi({\n          control: 'upload',\n          action: 'upload_many_media',\n          data: {\n            url: props.url,\n            data: selectedFilesBase64.value,\n            toAction: props.toAction\n          }\n        });\n        if (response.status === 'success') {\n          emit('done', response.media || response.data);\n        } else {\n          alert('آپلود با خطا مواجه شد: ' + response.message);\n        }\n      } catch (err) {\n        alert('خطا در ارسال: ' + err.message);\n      }\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: \"border-2 border-dashed border-gray-300 p-4 rounded text-center cursor-pointer\",\n        onDragover: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"prevent\"])),\n        onDragenter: _cache[2] || (_cache[2] = _withModifiers(() => {}, [\"prevent\"])),\n        onDrop: _withModifiers(handleDrop, [\"prevent\"])\n      }, [_cache[5] || (_cache[5] = _createElementVNode(\"p\", null, \"فایل‌ها را بکشید و رها کنید یا کلیک کنید\", -1)), _createElementVNode(\"input\", {\n        type: \"file\",\n        multiple: \"\",\n        ref_key: \"fileInput\",\n        ref: fileInput,\n        class: \"hidden\",\n        onChange: handleFiles\n      }, null, 544), _createElementVNode(\"button\", {\n        type: \"button\",\n        class: \"mt-2\",\n        onClick: _cache[0] || (_cache[0] = $event => fileInput.value.click())\n      }, \"انتخاب فایل\"), uploading.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"p\", null, \"در حال آماده‌سازی فایل‌ها برای ارسال...\", -1)), _createElementVNode(\"progress\", {\n        value: progress.value,\n        max: \"100\",\n        style: {\n          \"width\": \"100%\"\n        }\n      }, null, 8, _hoisted_2)])) : _createCommentVNode(\"\", true), previews.value.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[4] || (_cache[4] = _createElementVNode(\"p\", null, \"پیش‌نمایش فایل‌ها:\", -1)), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(previews.value, (item, i) => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: i,\n          class: \"flex flex-col items-center gap-2 border rounded p-2 bg-gray-50\"\n        }, [item.isImage ? (_openBlock(), _createElementBlock(\"img\", {\n          key: 0,\n          src: item.src,\n          class: \"max-w-[100px] max-h-[100px] object-contain border\"\n        }, null, 8, _hoisted_5)) : item.isVideo ? (_openBlock(), _createElementBlock(\"video\", {\n          key: 1,\n          src: item.src,\n          controls: \"\",\n          class: \"max-w-[150px] max-h-[100px]\"\n        }, null, 8, _hoisted_6)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"PDF File\")), _createElementVNode(\"span\", _hoisted_8, _toDisplayString(item.name), 1)]);\n      }), 128))])])) : _createCommentVNode(\"\", true)], 32);\n    };\n  }\n};","map":{"version":3,"names":["ref","sendApi","fileInput","previews","selectedFilesBase64","progress","uploading","props","__props","emit","__emit","handleDrop","e","files","dataTransfer","handleFiles","target","Array","from","length","value","count","file","Promise","resolve","reader","FileReader","onload","base64","result","push","src","name","isImage","type","startsWith","isVideo","Math","round","readAsDataURL","uploadFiles","response","control","action","data","url","toAction","status","media","alert","message","err"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/upload/UploaderManyMedia.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"border-2 border-dashed border-gray-300 p-4 rounded text-center cursor-pointer\"\r\n    @dragover.prevent\r\n    @dragenter.prevent\r\n    @drop.prevent=\"handleDrop\"\r\n  >\r\n    <p>فایل‌ها را بکشید و رها کنید یا کلیک کنید</p>\r\n    <input type=\"file\" multiple ref=\"fileInput\" class=\"hidden\" @change=\"handleFiles\" />\r\n    <button type=\"button\" class=\"mt-2\" @click=\"fileInput.click()\">انتخاب فایل</button>\r\n\r\n    <div v-if=\"uploading\" class=\"mt-4\">\r\n      <p>در حال آماده‌سازی فایل‌ها برای ارسال...</p>\r\n      <progress :value=\"progress\" max=\"100\" style=\"width: 100%\"></progress>\r\n    </div>\r\n\r\n    <div v-if=\"previews.length > 0\" class=\"mt-4\">\r\n      <p>پیش‌نمایش فایل‌ها:</p>\r\n      <div class=\"flex flex-wrap gap-4 justify-center\">\r\n        <div\r\n          v-for=\"(item, i) in previews\"\r\n          :key=\"i\"\r\n          class=\"flex flex-col items-center gap-2 border rounded p-2 bg-gray-50\"\r\n        >\r\n          <img\r\n            v-if=\"item.isImage\"\r\n            :src=\"item.src\"\r\n            class=\"max-w-[100px] max-h-[100px] object-contain border\"\r\n          />\r\n          <video\r\n            v-else-if=\"item.isVideo\"\r\n            :src=\"item.src\"\r\n            controls\r\n            class=\"max-w-[150px] max-h-[100px]\"\r\n          ></video>\r\n          <span v-else class=\"text-sm text-gray-600\">PDF File</span>\r\n          <span class=\"text-xs text-gray-400 truncate w-[100px] text-center\">{{ item.name }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits } from 'vue'\r\nimport { sendApi } from '@/utils/api'\r\n\r\nconst fileInput = ref(null)\r\nconst previews = ref([])\r\nconst selectedFilesBase64 = ref([])\r\nconst progress = ref(0)\r\nconst uploading = ref(false)\r\n\r\nconst props = defineProps({\r\n  url: String,\r\n  toAction: String,\r\n})\r\n\r\nconst emit = defineEmits(['done'])\r\n\r\nconst handleDrop = (e) => {\r\n  const files = e.dataTransfer.files\r\n  handleFiles({ target: { files } })\r\n}\r\n\r\nconst handleFiles = async (e) => {\r\n  const files = Array.from(e.target.files)\r\n  if (!files.length) return\r\n\r\n  previews.value = []\r\n  selectedFilesBase64.value = []\r\n  uploading.value = true\r\n  progress.value = 0\r\n\r\n  let count = 0\r\n\r\n  for (const file of files) {\r\n    await new Promise((resolve) => {\r\n      const reader = new FileReader()\r\n      reader.onload = () => {\r\n        const base64 = reader.result\r\n        selectedFilesBase64.value.push(base64)\r\n        previews.value.push({\r\n          src: base64,\r\n          name: file.name,\r\n          isImage: file.type.startsWith('image/'),\r\n          isVideo: file.type.startsWith('video/'),\r\n        })\r\n        count++\r\n        progress.value = Math.round((count / files.length) * 100)\r\n        resolve()\r\n      }\r\n      reader.readAsDataURL(file)\r\n    })\r\n  }\r\n\r\n  await uploadFiles()\r\n  uploading.value = false\r\n}\r\n\r\nconst uploadFiles = async () => {\r\n  try {\r\n    const response = await sendApi({\r\n      control: 'upload',\r\n      action: 'upload_many_media',\r\n      data: {\r\n        url: props.url,\r\n        data: selectedFilesBase64.value,\r\n        toAction: props.toAction,\r\n      },\r\n    })\r\n    if (response.status === 'success') {\r\n      emit('done', response.media || response.data)\r\n    } else {\r\n      alert('آپلود با خطا مواجه شد: ' + response.message)\r\n    }\r\n  } catch (err) {\r\n    alert('خطا در ارسال: ' + err.message)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.border-dashed {\r\n  border-style: dashed;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}