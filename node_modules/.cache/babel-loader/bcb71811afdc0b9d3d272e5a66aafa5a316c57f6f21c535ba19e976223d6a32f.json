{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notification-list\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nimport { ref, onMounted } from 'vue';\nimport { sendApi } from '@/utils/api';\nimport moment from 'moment-jalaali';\nexport default {\n  __name: 'NotificationList',\n  setup(__props) {\n    const notifications = ref([]);\n    async function fetchNotifications() {\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user'\n      });\n      if (res.status === 'success') {\n        notifications.value = res.data;\n      }\n    }\n    function formatDate(date) {\n      return moment(date).format('jYYYY/jMM/jDD HH:mm');\n    }\n    async function markAsRead(id) {\n      const res = await sendApi({\n        action: 'read_notifications',\n        control: 'user',\n        data: id\n      });\n      if (res.status === 'success') {\n        const n = notifications.value.find(n => n.id === id);\n        if (n) {\n          n.is_read = 1;\n          n.read_at = new Date().toISOString();\n        }\n      }\n    }\n    onMounted(() => {\n      fetchNotifications();\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", null, \"نوتیفیکیشن‌ها\", -1)), notifications.value.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"نوتیفیکیشنی وجود ندارد.\")) : _createCommentVNode(\"\", true), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(notifications.value, notif => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: notif.id,\n          class: _normalizeClass({\n            unread: !notif.is_read\n          }),\n          onClick: $event => markAsRead(notif.id)\n        }, [_createElementVNode(\"strong\", null, _toDisplayString(notif.title), 1), _createElementVNode(\"p\", null, _toDisplayString(notif.body), 1), _createElementVNode(\"small\", null, _toDisplayString(formatDate(notif.created_at)), 1)], 10, _hoisted_3);\n      }), 128))])]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","sendApi","moment","notifications","fetchNotifications","res","action","control","status","value","data","formatDate","date","format","markAsRead","id","n","find","is_read","read_at","Date","toISOString"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/NotificationList.vue"],"sourcesContent":["<template>\r\n    <div class=\"notification-list\">\r\n        <h3>نوتیفیکیشن‌ها</h3>\r\n        <div v-if=\"notifications.length === 0\">نوتیفیکیشنی وجود ندارد.</div>\r\n        <ul>\r\n            <li v-for=\"notif in notifications\"\r\n            :key=\"notif.id\"\r\n            :class=\"{ unread: !notif.is_read }\"\r\n            @click=\"markAsRead(notif.id)\">\r\n                <strong>{{ notif.title }}</strong>\r\n                <p>{{ notif.body }}</p>\r\n                <small>{{ formatDate(notif.created_at) }}</small>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n<script setup>\r\n    import { ref, onMounted } from 'vue'\r\n    import { sendApi } from '@/utils/api'\r\n    import moment from 'moment-jalaali'\r\n    const notifications = ref([])\r\n    async function fetchNotifications() {\r\n        const res = await sendApi({ action: 'get_notifications', control: 'user' })\r\n        if (res.status === 'success') {\r\n            notifications.value = res.data\r\n        }\r\n    }\r\n    function formatDate(date) { return moment(date).format('jYYYY/jMM/jDD HH:mm')}\r\n    async function markAsRead(id) {\r\n        const res = await sendApi({ action: 'read_notifications', control: 'user', data: id })\r\n        if (res.status === 'success') {\r\n            const n = notifications.value.find(n => n.id === id)\r\n            if (n) {\r\n                n.is_read = 1\r\n                n.read_at = new Date().toISOString()\r\n            }\r\n        }\r\n    }\r\n    onMounted(() => {fetchNotifications()})\r\n</script>\r\n\r\n<style scoped>\r\n    .notification-list {\r\n        padding: 1rem;\r\n        background: #fff;\r\n        border-radius: 10px;\r\n        max-height: 400px;\r\n        overflow-y: auto;\r\n    }\r\n    .notification-list ul {\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n    .notification-list li {\r\n        padding: 10px;\r\n        margin-bottom: 5px;\r\n        border-bottom: 1px solid #ddd;\r\n        cursor: pointer;\r\n        transition: background 0.3s;\r\n    }\r\n    .notification-list li.unread {\r\n        background-color: #f0f8ff;\r\n        font-weight: bold;\r\n    }\r\n    .notification-list li:hover {\r\n        background-color: #eef;\r\n    }\r\n</style>\r\n"],"mappings":";;;;;;;;;;AAiBI,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,MAAM,MAAM,gBAAgB;;;;IACnC,MAAMC,aAAa,GAAGJ,GAAG,CAAC,EAAE,CAAC;IAC7B,eAAeK,kBAAkBA,CAAA,EAAG;MAChC,MAAMC,GAAG,GAAG,MAAMJ,OAAO,CAAC;QAAEK,MAAM,EAAE,mBAAmB;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAC3E,IAAIF,GAAG,CAACG,MAAM,KAAK,SAAS,EAAE;QAC1BL,aAAa,CAACM,KAAK,GAAGJ,GAAG,CAACK,IAAI;MAClC;IACJ;IACA,SAASC,UAAUA,CAACC,IAAI,EAAE;MAAE,OAAOV,MAAM,CAACU,IAAI,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;IAAA;IAC7E,eAAeC,UAAUA,CAACC,EAAE,EAAE;MAC1B,MAAMV,GAAG,GAAG,MAAMJ,OAAO,CAAC;QAAEK,MAAM,EAAE,oBAAoB;QAAEC,OAAO,EAAE,MAAM;QAAEG,IAAI,EAAEK;MAAG,CAAC,CAAC;MACtF,IAAIV,GAAG,CAACG,MAAM,KAAK,SAAS,EAAE;QAC1B,MAAMQ,CAAC,GAAGb,aAAa,CAACM,KAAK,CAACQ,IAAI,CAACD,CAAC,IAAIA,CAAC,CAACD,EAAE,KAAKA,EAAE,CAAC;QACpD,IAAIC,CAAC,EAAE;UACHA,CAAC,CAACE,OAAO,GAAG,CAAC;UACbF,CAAC,CAACG,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACxC;MACJ;IACJ;IACArB,SAAS,CAAC,MAAM;MAACI,kBAAkB,CAAC,CAAC;IAAA,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}