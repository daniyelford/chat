import { ref as c, watch as y, onMounted as k, createElementBlock as i, openBlock as d, createTextVNode as x, toDisplayString as m, Fragment as b, renderList as w, withDirectives as _, normalizeClass as T, vModelText as D, nextTick as a } from "vue";
const V = { class: "otp-container" }, A = ["onUpdate:modelValue", "onKeyup"], B = {
  __name: "OtpInput",
  props: {
    modelValue: { type: String, default: "" },
    length: { type: Number, default: 6 }
  },
  emits: ["update:modelValue"],
  setup(f, { emit: g }) {
    const r = c(""), p = c(null), s = f, v = g, o = c(Array.from({ length: s.length }, (e, t) => s.modelValue[t] || "")), h = (e, t) => {
      const n = e.currentTarget.parentElement.children, l = /^[0-9]$/.test(e.key);
      if (!l && !["Backspace", "ArrowLeft", "ArrowRight", "Tab"].includes(e.key)) {
        e.preventDefault();
        return;
      }
      if (l) {
        o.value[t] = e.key, e.preventDefault(), t < o.value.length - 1 && a(() => n[t + 1].focus());
        return;
      }
      if (e.key === "Backspace") {
        o.value[t] = "", e.preventDefault(), t > 0 && a(() => n[t - 1].focus());
        return;
      }
      e.key === "ArrowLeft" && t > 0 && a(() => n[t - 1].focus()), e.key === "ArrowRight" && t < o.value.length - 1 && a(() => n[t + 1].focus());
    };
    return y(o, () => {
      v("update:modelValue", o.value.join(""));
    }, { deep: !0 }), k(() => {
      const e = document.createElement("style");
      if (e.textContent = `
    .otp-container { direction: ltr;display: flex; gap: 0.5rem; justify-content: space-evenly; }
    .digit-box { width: 1.5rem; height: 2rem; font-size: 1rem; text-align: center; border: 2px solid black; border-radius: 6px; }
    .bounce { animation: pulse 0.3s ease-in-out alternate; } 
      @keyframes pulse { 0% { transform: scale(1); } 100% { transform: scale(1.1); } }
    `, document.head.appendChild(e), "OTPCredential" in window) {
        const t = new AbortController();
        navigator.credentials.get({
          otp: { transport: ["sms"] },
          signal: t.signal
        }).then((n) => {
          p.value = n, n?.code ? o.value = n.code.split("").slice(0, s.length) : r.value = "OTP code not received!";
        }).catch((n) => {
          r.value = n.message;
        });
      } else
        console.log("WebOTP not supported on this device.");
    }), (e, t) => (d(), i("div", V, [
      x(m(r.value ?? "") + " " + m(p.value) + " ", 1),
      (d(!0), i(b, null, w(o.value, (n, l) => _((d(), i("input", {
        key: l,
        type: "text",
        class: T(["digit-box", { bounce: n !== "" }]),
        "onUpdate:modelValue": (u) => o.value[l] = u,
        maxlength: "1",
        onKeyup: (u) => h(u, l)
      }, null, 42, A)), [
        [D, o.value[l]]
      ])), 128))
    ]));
  }
};
export {
  B as default
};
