import { ref as p, watch as v, onMounted as w, createElementBlock as i, openBlock as d, createTextVNode as k, toDisplayString as x, Fragment as b, renderList as _, withDirectives as A, normalizeClass as T, vModelText as D, nextTick as c } from "vue";
const V = { class: "otp-container" }, C = ["onUpdate:modelValue", "placeholder", "onKeydown"], E = `
  .otp-container { direction: ltr;display: flex; gap: 0.5rem; justify-content: space-evenly; }
  .digit-box { width: 1.5rem; height: 2rem; font-size: 1rem; text-align: center; border: 2px solid black; border-radius: 6px; }
  .bounce { animation: pulse 0.3s ease-in-out alternate; } 
    @keyframes pulse { 0% { transform: scale(1); } 100% { transform: scale(1.1); } }
  `, O = {
  __name: "OtpInput",
  props: {
    modelValue: { type: String, default: "" },
    length: { type: Number, default: 6 }
  },
  emits: ["update:modelValue"],
  setup(m, { emit: f }) {
    const r = p(""), u = m, g = f, o = p(Array.from({ length: u.length }, (e, n) => u.modelValue[n] || "")), h = (e, n) => {
      const l = e.currentTarget.parentElement.children, t = /^[0-9]$/.test(e.key);
      if (!t && !["Backspace", "ArrowLeft", "ArrowRight", "Tab"].includes(e.key)) {
        e.preventDefault();
        return;
      }
      if (t) {
        o.value[n] = e.key, e.preventDefault(), n < o.value.length - 1 && c(() => l[n + 1].focus());
        return;
      }
      if (e.key === "Backspace") {
        o.value[n] = "", e.preventDefault(), n > 0 && c(() => l[n - 1].focus());
        return;
      }
      e.key === "ArrowLeft" && n > 0 && c(() => l[n - 1].focus()), e.key === "ArrowRight" && n < o.value.length - 1 && c(() => l[n + 1].focus());
    };
    async function y(e = 6e4) {
      if (!("OTPCredential" in window)) return;
      const n = new AbortController(), l = n.signal;
      setTimeout(() => n.abort(), e);
      try {
        const t = await navigator.credentials.get({
          otp: { transport: ["sms"] },
          signal: l
        });
        r.value = t, t?.code ? (r.value = t.code, t.code.split("").forEach((a, s) => {
          s < u.length && (o.value[s] = a);
        }), c(() => {
          const a = document.querySelectorAll(".otp-container input"), s = Math.min(t.code.length, u.length) - 1;
          a[s] && a[s].focus();
        })) : r.value = "empty content";
      } catch (t) {
        r.value = t.message, console.warn("OTP AutoFill failed:", t.message);
      }
    }
    return v(o, () => {
      g("update:modelValue", o.value.join(""));
    }, { deep: !0 }), w(() => {
      const e = document.createElement("style");
      e.textContent = E, document.head.appendChild(e), y();
    }), (e, n) => (d(), i("div", V, [
      k(x(r.value ?? "") + " ", 1),
      (d(!0), i(b, null, _(o.value, (l, t) => A((d(), i("input", {
        key: t,
        type: "text",
        class: T(["digit-box", { bounce: l !== "" }]),
        "onUpdate:modelValue": (a) => o.value[t] = a,
        maxlength: "1",
        placeholder: o.value[t] ?? 0,
        onKeydown: (a) => h(a, t)
      }, null, 42, C)), [
        [D, o.value[t]]
      ])), 128))
    ]));
  }
};
export {
  O as default
};
