import { ref as u, watch as x, onMounted as w, createElementBlock as i, openBlock as d, createTextVNode as _, toDisplayString as m, Fragment as b, renderList as k, withDirectives as T, normalizeClass as V, vModelText as A, nextTick as r } from "vue";
const C = { class: "otp-container" }, E = ["onUpdate:modelValue", "onInput", "onKeydown"], O = {
  __name: "OtpInput",
  props: {
    modelValue: { type: String, default: "" },
    length: { type: Number, default: 6 }
  },
  emits: ["update:modelValue"],
  setup(g, { emit: h }) {
    const s = u(""), p = u(null), c = g, f = h, o = u(Array.from({ length: c.length }, (n, e) => c.modelValue[e] || "")), v = (n, e) => {
      const t = n.target.value.replace(/[^0-9]/g, "").charAt(0) || "";
      o.value[e] = t, t && e < o.value.length - 1 && r(() => n.target.parentElement.children[e + 1].focus());
    }, y = (n, e) => {
      const t = n.currentTarget.parentElement.children;
      if (n.key === "Backspace") {
        !o.value[e] && e > 0 && r(() => t[e - 1].focus());
        return;
      }
      n.key === "ArrowLeft" && e > 0 && r(() => t[e - 1].focus()), n.key === "ArrowRight" && e < o.value.length - 1 && r(() => t[e + 1].focus());
    };
    return x(o, () => {
      f("update:modelValue", o.value.join(""));
    }, { deep: !0 }), w(() => {
      const n = document.createElement("style");
      if (n.textContent = `
    .otp-container { direction: ltr;display: flex; gap: 0.5rem; justify-content: space-evenly; }
    .digit-box { width: 1.5rem; height: 2rem; font-size: 1rem; text-align: center; border: 2px solid black; border-radius: 6px; }
    .bounce { animation: pulse 0.3s ease-in-out alternate; } 
      @keyframes pulse { 0% { transform: scale(1); } 100% { transform: scale(1.1); } }
    `, document.head.appendChild(n), "OTPCredential" in window) {
        const e = new AbortController();
        navigator.credentials.get({
          otp: { transport: ["sms"] },
          signal: e.signal
        }).then((t) => {
          p.value = t, t?.code ? o.value = t.code.split("").slice(0, c.length) : s.value = "OTP code not received!";
        }).catch((t) => {
          s.value = t.message;
        });
      } else
        console.log("WebOTP not supported on this device.");
    }), (n, e) => (d(), i("div", C, [
      _(m(s.value ?? "") + " " + m(p.value) + " ", 1),
      (d(!0), i(b, null, k(o.value, (t, l) => T((d(), i("input", {
        key: l,
        type: "text",
        class: V(["digit-box", { bounce: t !== "" }]),
        "onUpdate:modelValue": (a) => o.value[l] = a,
        maxlength: "1",
        onInput: (a) => v(a, l),
        onKeydown: (a) => y(a, l)
      }, null, 42, E)), [
        [A, o.value[l]]
      ])), 128))
    ]));
  }
};
export {
  O as default
};
