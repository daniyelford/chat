{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"news-list\"\n};\nimport { ref, computed, onMounted } from 'vue';\nimport dayjs from 'dayjs';\nimport jalaliday from 'jalaliday';\nimport { sendApi } from '@/utils/api';\n\n// فعال کردن پلاگین شمسی\n\nexport default {\n  __name: 'ReportList',\n  setup(__props) {\n    dayjs.extend(jalaliday);\n    const today = dayjs().calendar('jalali');\n    // سال شمسی:\n    const year = today.jYear() || today.year();\n    // ماه شمسی (0-بر اساس ماه‌های شمسی):\n    const month = today.jMonth() || today.month();\n    const selectedDate = ref(null);\n    const allNews = ref([]);\n    const newsCountByDay = ref({});\n    function getDaysInMonth(year, month) {\n      const days = [];\n      let date = dayjs().calendar('jalali').jYear(year).jMonth(month).startOf('month');\n      const endOfMonth = date.endOf('month');\n      while (date.isBefore(endOfMonth) || date.isSame(endOfMonth, 'day')) {\n        const isoDate = date.format('YYYY-MM-DD'); // شمسی استاندارد YYYY-MM-DD\n        days.push({\n          date: isoDate,\n          day: date.date(),\n          isToday: isoDate === today.format('YYYY-MM-DD'),\n          count: newsCountByDay.value[isoDate] || 0\n        });\n        date = date.add(1, 'day');\n      }\n      return days;\n    }\n    const daysInMonth = computed(() => getDaysInMonth(year, month));\n    onMounted(async () => {\n      // فرض: API شمسی تاریخ رو قبول می‌کنه (YYYY-MM-DD)\n      const data = await sendApi({\n        control: 'news',\n        action: 'get_news_for_month',\n        year,\n        month: month + 1\n      });\n      if (data.status === 'success') {\n        allNews.value = data.news;\n        newsCountByDay.value = {};\n        data.news.forEach(n => {\n          newsCountByDay.value[n.date] = (newsCountByDay.value[n.date] || 0) + 1;\n        });\n      }\n    });\n    const selectDate = date => {\n      selectedDate.value = date;\n    };\n    const newsByDate = computed(() => {\n      return allNews.value.filter(n => n.date === selectedDate.value);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"تقویم اخبار (شمسی)\", -1)), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(daysInMonth.value, day => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          class: _normalizeClass([\"day\", {\n            today: day.isToday,\n            selected: day.date === selectedDate.value\n          }]),\n          key: day.date,\n          onClick: $event => selectDate(day.date)\n        }, [_createElementVNode(\"span\", null, _toDisplayString(day.day), 1), day.count > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString(day.count), 1)) : _createCommentVNode(\"\", true)], 10, _hoisted_2);\n      }), 128))]), selectedDate.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"h3\", null, \"خبرهای \" + _toDisplayString(selectedDate.value), 1), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(newsByDate.value, news => {\n        return _openBlock(), _createElementBlock(\"li\", {\n          key: news.id\n        }, _toDisplayString(news.title), 1);\n      }), 128))])])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","dayjs","jalaliday","sendApi","extend","today","calendar","year","jYear","month","jMonth","selectedDate","allNews","newsCountByDay","getDaysInMonth","days","date","startOf","endOfMonth","endOf","isBefore","isSame","isoDate","format","push","day","isToday","count","value","add","daysInMonth","data","control","action","status","news","forEach","n","selectDate","newsByDate","filter"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/dashboard/pagesContent/ReportList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>تقویم اخبار (شمسی)</h2>\r\n    <div class=\"calendar\">\r\n      <div \r\n        class=\"day\" \r\n        v-for=\"day in daysInMonth\" \r\n        :key=\"day.date\"\r\n        :class=\"{ today: day.isToday, selected: day.date === selectedDate }\"\r\n        @click=\"selectDate(day.date)\"\r\n      >\r\n        <span>{{ day.day }}</span>\r\n        <div v-if=\"day.count > 0\" class=\"badge\">{{ day.count }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"selectedDate\" class=\"news-list\">\r\n      <h3>خبرهای {{ selectedDate }}</h3>\r\n      <ul>\r\n        <li v-for=\"news in newsByDate\" :key=\"news.id\">{{ news.title }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue'\r\nimport dayjs from 'dayjs'\r\nimport jalaliday from 'jalaliday'\r\nimport { sendApi } from '@/utils/api'\r\n\r\n// فعال کردن پلاگین شمسی\r\ndayjs.extend(jalaliday)\r\nconst today = dayjs().calendar('jalali')\r\n// سال شمسی:\r\nconst year = today.jYear() || today.year()\r\n// ماه شمسی (0-بر اساس ماه‌های شمسی):\r\nconst month = today.jMonth() || today.month()\r\nconst selectedDate = ref(null)\r\nconst allNews = ref([])\r\nconst newsCountByDay = ref({})\r\n\r\nfunction getDaysInMonth(year, month) {\r\n  const days = []\r\n  let date = dayjs().calendar('jalali').jYear(year).jMonth(month).startOf('month')\r\n  const endOfMonth = date.endOf('month')\r\n\r\n  while (date.isBefore(endOfMonth) || date.isSame(endOfMonth, 'day')) {\r\n    const isoDate = date.format('YYYY-MM-DD')  // شمسی استاندارد YYYY-MM-DD\r\n    days.push({\r\n      date: isoDate,\r\n      day: date.date(),\r\n      isToday: isoDate === today.format('YYYY-MM-DD'),\r\n      count: newsCountByDay.value[isoDate] || 0,\r\n    })\r\n    date = date.add(1, 'day')\r\n  }\r\n  return days\r\n}\r\n\r\nconst daysInMonth = computed(() => getDaysInMonth(year, month))\r\n\r\nonMounted(async () => {\r\n  // فرض: API شمسی تاریخ رو قبول می‌کنه (YYYY-MM-DD)\r\n  const data = await sendApi({ control: 'news', action: 'get_news_for_month', year, month: month + 1 })\r\n  if (data.status === 'success') {\r\n    allNews.value = data.news\r\n    newsCountByDay.value = {}\r\n    data.news.forEach(n => {\r\n      newsCountByDay.value[n.date] = (newsCountByDay.value[n.date] || 0) + 1\r\n    })\r\n  }\r\n})\r\n\r\nconst selectDate = (date) => {\r\n  selectedDate.value = date\r\n}\r\n\r\nconst newsByDate = computed(() => {\r\n  return allNews.value.filter(n => n.date === selectedDate.value)\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.calendar {\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  gap: 8px;\r\n  max-width: 400px;\r\n  margin-bottom: 20px;\r\n}\r\n.day {\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  border-radius: 6px;\r\n  background: #f9f9f9;\r\n  transition: background-color 0.3s;\r\n}\r\n.day.today {\r\n  border-color: #3b82f6;\r\n  font-weight: bold;\r\n}\r\n.day.selected {\r\n  background-color: #3b82f6;\r\n  color: white;\r\n}\r\n.badge {\r\n  position: absolute;\r\n  top: 4px;\r\n  right: 6px;\r\n  background: #ef4444;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  border-radius: 50%;\r\n  width: 20px;\r\n  height: 20px;\r\n  line-height: 20px;\r\n}\r\n.news-list ul {\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n.news-list li {\r\n  padding: 6px 0;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}