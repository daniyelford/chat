{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport { sendApi } from '@/utils/api';\nexport const useCartableStore = defineStore('cartable', () => {\n  const allItems = ref([]);\n  const loading = ref(true);\n  let pollingInterval = null;\n  const simplifyNews = items => items.map(item => ({\n    id: item.id,\n    status: item.status,\n    updated_at: item.updated_at\n  }));\n  const fetchCartables = async () => {\n    try {\n      const res = await sendApi({\n        control: 'news',\n        action: 'get_cartables'\n      });\n      if (res.status === 'success') {\n        const newData = res.data || [];\n        const isSame = JSON.stringify(simplifyNews(allItems.value)) === JSON.stringify(simplifyNews(newData));\n        if (!isSame) {\n          allItems.value = newData;\n        }\n      } else {\n        alert('خطا در دریافت اطلاعات: ' + res.message);\n      }\n    } catch (e) {\n      alert('خطا در ارتباط با سرور: ' + e.message);\n    }\n    loading.value = false;\n  };\n  const startPolling = () => {\n    if (pollingInterval) return;\n    fetchCartables();\n    pollingInterval = setInterval(fetchCartables, 10000);\n  };\n  const stopPolling = () => {\n    if (pollingInterval) {\n      clearInterval(pollingInterval);\n      pollingInterval = null;\n    }\n  };\n  const getCartableById = id => {\n    return allItems.value.find(item => item.id === parseInt(id));\n  };\n  return {\n    allItems,\n    loading,\n    fetchCartables,\n    startPolling,\n    stopPolling,\n    getCartableById\n  };\n});","map":{"version":3,"names":["defineStore","ref","sendApi","useCartableStore","allItems","loading","pollingInterval","simplifyNews","items","map","item","id","status","updated_at","fetchCartables","res","control","action","newData","data","isSame","JSON","stringify","value","alert","message","e","startPolling","setInterval","stopPolling","clearInterval","getCartableById","find","parseInt"],"sources":["D:/GitHub/ci3-vue3/vue3/src/stores/cartableStore.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport { sendApi } from '@/utils/api'\r\nexport const useCartableStore = defineStore('cartable', () => {\r\n    const allItems = ref([])\r\n    const loading = ref(true)\r\n    let pollingInterval = null\r\n    const simplifyNews = (items) =>\r\n        items.map(item => ({\r\n            id: item.id,\r\n            status: item.status,\r\n            updated_at: item.updated_at\r\n    }))\r\n    const fetchCartables = async () => {\r\n        try {\r\n            const res = await sendApi({ control: 'news', action: 'get_cartables' })\r\n            if (res.status === 'success') {\r\n                const newData = res.data || []\r\n                const isSame = JSON.stringify(simplifyNews(allItems.value)) === JSON.stringify(simplifyNews(newData))\r\n                if (!isSame) {\r\n                    allItems.value = newData\r\n                }\r\n            } else {\r\n                alert('خطا در دریافت اطلاعات: ' + res.message)\r\n            }\r\n        } catch (e) {\r\n            alert('خطا در ارتباط با سرور: ' + e.message)\r\n        }\r\n        loading.value = false\r\n    }\r\n    const startPolling = () => {\r\n        if (pollingInterval) return\r\n        fetchCartables()\r\n        pollingInterval = setInterval(fetchCartables, 10000)\r\n    }\r\n    const stopPolling = () => {\r\n        if (pollingInterval) {\r\n            clearInterval(pollingInterval)\r\n            pollingInterval = null\r\n        }\r\n    }\r\n    const getCartableById = (id) => {\r\n        return allItems.value.find(item => item.id === parseInt(id))\r\n    }\r\n    return {\r\n        allItems,\r\n        loading,\r\n        fetchCartables,\r\n        startPolling,\r\n        stopPolling,\r\n        getCartableById,\r\n    }\r\n})\r\n"],"mappings":";;;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,GAAG,QAAQ,KAAK;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAO,MAAMC,gBAAgB,GAAGH,WAAW,CAAC,UAAU,EAAE,MAAM;EAC1D,MAAMI,QAAQ,GAAGH,GAAG,CAAC,EAAE,CAAC;EACxB,MAAMI,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;EACzB,IAAIK,eAAe,GAAG,IAAI;EAC1B,MAAMC,YAAY,GAAIC,KAAK,IACvBA,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;IACfC,EAAE,EAAED,IAAI,CAACC,EAAE;IACXC,MAAM,EAAEF,IAAI,CAACE,MAAM;IACnBC,UAAU,EAAEH,IAAI,CAACG;EACzB,CAAC,CAAC,CAAC;EACH,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMb,OAAO,CAAC;QAAEc,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAgB,CAAC,CAAC;MACvE,IAAIF,GAAG,CAACH,MAAM,KAAK,SAAS,EAAE;QAC1B,MAAMM,OAAO,GAAGH,GAAG,CAACI,IAAI,IAAI,EAAE;QAC9B,MAAMC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACf,YAAY,CAACH,QAAQ,CAACmB,KAAK,CAAC,CAAC,KAAKF,IAAI,CAACC,SAAS,CAACf,YAAY,CAACW,OAAO,CAAC,CAAC;QACrG,IAAI,CAACE,MAAM,EAAE;UACThB,QAAQ,CAACmB,KAAK,GAAGL,OAAO;QAC5B;MACJ,CAAC,MAAM;QACHM,KAAK,CAAC,yBAAyB,GAAGT,GAAG,CAACU,OAAO,CAAC;MAClD;IACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRF,KAAK,CAAC,yBAAyB,GAAGE,CAAC,CAACD,OAAO,CAAC;IAChD;IACApB,OAAO,CAACkB,KAAK,GAAG,KAAK;EACzB,CAAC;EACD,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIrB,eAAe,EAAE;IACrBQ,cAAc,CAAC,CAAC;IAChBR,eAAe,GAAGsB,WAAW,CAACd,cAAc,EAAE,KAAK,CAAC;EACxD,CAAC;EACD,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIvB,eAAe,EAAE;MACjBwB,aAAa,CAACxB,eAAe,CAAC;MAC9BA,eAAe,GAAG,IAAI;IAC1B;EACJ,CAAC;EACD,MAAMyB,eAAe,GAAIpB,EAAE,IAAK;IAC5B,OAAOP,QAAQ,CAACmB,KAAK,CAACS,IAAI,CAACtB,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKsB,QAAQ,CAACtB,EAAE,CAAC,CAAC;EAChE,CAAC;EACD,OAAO;IACHP,QAAQ;IACRC,OAAO;IACPS,cAAc;IACda,YAAY;IACZE,WAAW;IACXE;EACJ,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}