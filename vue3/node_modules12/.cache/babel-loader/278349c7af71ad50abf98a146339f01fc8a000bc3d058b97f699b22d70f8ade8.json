{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport { ref, onMounted } from 'vue';\nimport { sendApi } from '@/utils/api';\nimport { BASE_URL } from '@/config';\nexport default {\n  __name: 'FingerPrintRegister',\n  setup(__props) {\n    const fingerPrintIcon = BASE_URL + '/assets/images/f.png';\n    const isSupported = ref(false);\n    onMounted(() => {\n      isSupported.value = window.PublicKeyCredential && typeof window.PublicKeyCredential === 'function';\n    });\n    async function registerWithWebAuthn() {\n      try {\n        const res = await sendApi({\n          action: 'register_webauthn_request',\n          control: 'login'\n        });\n        if (!res || !res.publicKey) throw new Error('مشکلی در دریافت challenge ثبت رخ داد.');\n        const options = preformatMakeCredReq(res.publicKey);\n        const credential = await navigator.credentials.create({\n          publicKey: options\n        });\n        const result = await sendApi({\n          action: 'register_webauthn_response',\n          data: credential,\n          control: 'login'\n        });\n        if (result && result.status === 'success') {\n          alert('ثبت اثر انگشت موفقیت‌آمیز بود.');\n        } else {\n          alert('ثبت اثر انگشت ناموفق بود.');\n        }\n      } catch (err) {\n        console.error(err);\n        alert('خطا در ثبت اثر انگشت.');\n      }\n    }\n    function decodeMimeBase64(mimeString) {\n      const match = mimeString.match(/=\\?BINARY\\?B\\?(.*)\\?=/i);\n      if (match && match[1]) {\n        return Uint8Array.from(atob(match[1]), c => c.charCodeAt(0)).buffer;\n      }\n      return Uint8Array.from(atob(mimeString), c => c.charCodeAt(0)).buffer;\n    }\n    function preformatMakeCredReq(options) {\n      const opts = {\n        ...options\n      };\n      opts.challenge = decodeMimeBase64(opts.challenge);\n      if (opts.user && opts.user.id) {\n        opts.user.id = decodeMimeBase64(opts.user.id);\n      }\n      if (opts.excludeCredentials && Array.isArray(opts.excludeCredentials)) {\n        opts.excludeCredentials = opts.excludeCredentials.map(cred => ({\n          ...cred,\n          id: decodeMimeBase64(cred.id)\n        }));\n      }\n      return opts;\n    }\n    return (_ctx, _cache) => {\n      return isSupported.value ? (_openBlock(), _createElementBlock(\"button\", {\n        key: 0,\n        onClick: registerWithWebAuthn\n      }, [_createElementVNode(\"img\", {\n        src: fingerPrintIcon,\n        alt: \"finger print register icon\"\n      })])) : _createCommentVNode(\"\", true);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","sendApi","BASE_URL","fingerPrintIcon","isSupported","value","window","PublicKeyCredential","registerWithWebAuthn","res","action","control","publicKey","Error","options","preformatMakeCredReq","credential","navigator","credentials","create","result","data","status","alert","err","console","error","decodeMimeBase64","mimeString","match","Uint8Array","from","atob","c","charCodeAt","buffer","opts","challenge","user","id","excludeCredentials","Array","isArray","map","cred"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/FingerPrintRegister.vue"],"sourcesContent":["<template>\r\n  <button v-if=\"isSupported\" @click=\"registerWithWebAuthn\">\r\n    <img :src=\"fingerPrintIcon\" alt=\"finger print register icon\">\r\n</button>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref, onMounted } from 'vue'\r\n  import { sendApi } from '@/utils/api'\r\n  import { BASE_URL } from '@/config';\r\n  const fingerPrintIcon=BASE_URL+'/assets/images/f.png'\r\n  const isSupported = ref(false)\r\n  onMounted(() => {\r\n    isSupported.value = window.PublicKeyCredential && typeof window.PublicKeyCredential === 'function'\r\n  })\r\n  async function registerWithWebAuthn() {\r\n    try {\r\n      const res = await sendApi({\r\n        action: 'register_webauthn_request',\r\n        control:'login'\r\n      })\r\n      if (!res || !res.publicKey) throw new Error('مشکلی در دریافت challenge ثبت رخ داد.')\r\n      const options = preformatMakeCredReq(res.publicKey)\r\n      const credential = await navigator.credentials.create({\r\n        publicKey: options\r\n      })\r\n      const result = await sendApi({\r\n        action: 'register_webauthn_response',\r\n        data:credential,\r\n        control:'login'\r\n      })\r\n      if (result && result.status === 'success') {\r\n        alert('ثبت اثر انگشت موفقیت‌آمیز بود.')\r\n      } else {\r\n        alert('ثبت اثر انگشت ناموفق بود.')\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n      alert('خطا در ثبت اثر انگشت.')\r\n    }\r\n  }\r\n  function decodeMimeBase64(mimeString) {\r\n    const match = mimeString.match(/=\\?BINARY\\?B\\?(.*)\\?=/i)\r\n    if (match && match[1]) {\r\n      return Uint8Array.from(atob(match[1]), c => c.charCodeAt(0)).buffer\r\n    }\r\n    return Uint8Array.from(atob(mimeString), c => c.charCodeAt(0)).buffer\r\n  }\r\n  function preformatMakeCredReq(options) {\r\n    const opts = { ...options }\r\n    opts.challenge = decodeMimeBase64(opts.challenge)\r\n    if (opts.user && opts.user.id) {\r\n      opts.user.id = decodeMimeBase64(opts.user.id)\r\n    }\r\n    if (opts.excludeCredentials && Array.isArray(opts.excludeCredentials)) {\r\n      opts.excludeCredentials = opts.excludeCredentials.map(cred => ({\r\n        ...cred,\r\n        id: decodeMimeBase64(cred.id)\r\n      }))\r\n    }\r\n    return opts\r\n  }\r\n</script>\r\n<style scoped>\r\n  button{\r\n    border: none;\r\n    outline: none;\r\n    width: 35px;\r\n    height: 35px;\r\n    cursor: pointer;\r\n    padding: 0;\r\n    background: transparent;\r\n  }\r\n  img{\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}