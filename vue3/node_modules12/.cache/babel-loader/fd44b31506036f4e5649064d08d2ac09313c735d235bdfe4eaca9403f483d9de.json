{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineStore } from 'pinia';\nimport { shallowRef, ref } from 'vue';\nimport { sendApi } from '@/utils/api';\nimport isEqual from 'lodash/isEqual';\nexport const useManageNewsStore = defineStore('manageNews', () => {\n  const newsList = shallowRef([]);\n  const loading = ref(false);\n\n  // const extractEssential = (list) =>\n  //   list.map((item) => ({\n  //     id: item.id,\n  //     status: item.status,\n  //     reportLength: item.report?.length || 0,\n  //     updated_at: item.report?.[0]?.updated_at ?? null,\n  //   }))\n\n  // const isSameData = (a, b) => {\n  //   return JSON.stringify(extractEssential(a)) === JSON.stringify(extractEssential(b))\n  // }\n\n  // const loadNews = async () => {\n  //   loading.value = true\n  //   try {\n  //     const res = await sendApi({ control: 'news', action: 'user_news' })\n  //     if (res.status === 'success') {\n  //       const news = res.data || []\n  //       if (!isSameData(newsList.value, news)) {\n  //         newsList.value = news\n  //       }\n  //     } else {\n  //       alert('خطا در بارگذاری اخبار: ' + res.message)\n  //     }\n  //   } catch (error) {\n  //     alert('خطا در ارتباط با سرور: ' + error.message)\n  //   }\n  //   loading.value = false\n  // }\n\n  const restoreNews = async id => {\n    try {\n      const res = await sendApi({\n        control: 'news',\n        action: 'restore_news',\n        data: {\n          news_id: id\n        }\n      });\n      if (res.status === 'success') {\n        await loadNews();\n        return true;\n      } else {\n        alert('خطا در پخش مجدد خبر: ' + res.message);\n        return false;\n      }\n    } catch (error) {\n      alert('خطا در ارتباط با سرور: ' + error.message);\n      return false;\n    }\n  };\n  const deleteNews = async id => {\n    try {\n      const res = await sendApi({\n        control: 'news',\n        action: 'delete_news',\n        data: {\n          news_id: id\n        }\n      });\n      if (res.status === 'success') {\n        newsList.value = newsList.value.filter(news => news.id !== id);\n        return true;\n      } else {\n        alert('خطا در حذف خبر: ' + res.message);\n        return false;\n      }\n    } catch (error) {\n      alert('خطا در ارتباط با سرور: ' + error.message);\n      return false;\n    }\n  };\n  const loadNews = async () => {\n    loading.value = true;\n    try {\n      const res = await sendApi({\n        control: 'news',\n        action: 'user_news'\n      });\n      if (res.status === 'success') {\n        const newNewsList = res.data || [];\n\n        // اگر لیست فعلی خالیه، فقط یک‌بار مقداردهی اولیه:\n        if (newsList.value.length === 0) {\n          newsList.value = newNewsList;\n        } else {\n          // مقایسه جزئی برای به‌روزرسانی فقط آیتم‌هایی که واقعاً تغییر کردند:\n          const newList = [];\n          newNewsList.forEach(newItem => {\n            const oldItem = newsList.value.find(n => n.id == newItem.id);\n            if (!oldItem || !isEqual(oldItem, newItem)) {\n              newList.push(newItem);\n            } else {\n              newList.push(oldItem); // همون رفرنس قبلی\n            }\n          });\n\n          // بررسی حذف‌شده‌ها\n          const deletedIds = newsList.value.filter(old => !newNewsList.find(n => n.id == old.id)).map(n => n.id);\n          if (!isEqual(newsList.value.map(n => n.id).sort(), newList.map(n => n.id).sort())) {\n            newsList.value = newList;\n          } else {\n            // فقط آیتم‌های حذف‌شده رو حذف کن:\n            newsList.value = newList.filter(n => !deletedIds.includes(n.id));\n          }\n        }\n      } else {\n        alert('خطا در بارگذاری اخبار: ' + res.message);\n      }\n    } catch (error) {\n      alert('خطا در ارتباط با سرور: ' + error.message);\n    }\n    loading.value = false;\n  };\n  let pollingInterval = null;\n  const startPolling = () => {\n    if (pollingInterval) return;\n    loadNews();\n    pollingInterval = setInterval(() => {\n      loadNews();\n    }, 10000);\n  };\n  const stopPolling = () => {\n    if (pollingInterval) {\n      clearInterval(pollingInterval);\n      pollingInterval = null;\n    }\n  };\n  return {\n    newsList,\n    loading,\n    loadNews,\n    deleteNews,\n    restoreNews,\n    startPolling,\n    stopPolling\n  };\n});","map":{"version":3,"names":["defineStore","shallowRef","ref","sendApi","isEqual","useManageNewsStore","newsList","loading","restoreNews","id","res","control","action","data","news_id","status","loadNews","alert","message","error","deleteNews","value","filter","news","newNewsList","length","newList","forEach","newItem","oldItem","find","n","push","deletedIds","old","map","sort","includes","pollingInterval","startPolling","setInterval","stopPolling","clearInterval"],"sources":["D:/GitHub/ci3-vue3/vue3/src/stores/manageNews.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { shallowRef, ref } from 'vue'\r\nimport { sendApi } from '@/utils/api'\r\nimport isEqual from 'lodash/isEqual'\r\nexport const useManageNewsStore = defineStore('manageNews', () => {\r\n  const newsList = shallowRef([])\r\n  const loading = ref(false)\r\n\r\n  // const extractEssential = (list) =>\r\n  //   list.map((item) => ({\r\n  //     id: item.id,\r\n  //     status: item.status,\r\n  //     reportLength: item.report?.length || 0,\r\n  //     updated_at: item.report?.[0]?.updated_at ?? null,\r\n  //   }))\r\n\r\n  // const isSameData = (a, b) => {\r\n  //   return JSON.stringify(extractEssential(a)) === JSON.stringify(extractEssential(b))\r\n  // }\r\n\r\n  // const loadNews = async () => {\r\n  //   loading.value = true\r\n  //   try {\r\n  //     const res = await sendApi({ control: 'news', action: 'user_news' })\r\n  //     if (res.status === 'success') {\r\n  //       const news = res.data || []\r\n  //       if (!isSameData(newsList.value, news)) {\r\n  //         newsList.value = news\r\n  //       }\r\n  //     } else {\r\n  //       alert('خطا در بارگذاری اخبار: ' + res.message)\r\n  //     }\r\n  //   } catch (error) {\r\n  //     alert('خطا در ارتباط با سرور: ' + error.message)\r\n  //   }\r\n  //   loading.value = false\r\n  // }\r\n\r\n  const restoreNews = async (id) => {\r\n    try {\r\n      const res = await sendApi({ control: 'news', action: 'restore_news', data: { news_id: id } })\r\n      if (res.status === 'success') {\r\n        await loadNews()\r\n        return true\r\n      } else {\r\n        alert('خطا در پخش مجدد خبر: ' + res.message)\r\n        return false\r\n      }\r\n    } catch (error) {\r\n      alert('خطا در ارتباط با سرور: ' + error.message)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const deleteNews = async (id) => {\r\n    try {\r\n      const res = await sendApi({ control: 'news', action: 'delete_news', data: { news_id: id } })\r\n      if (res.status === 'success') {\r\n        newsList.value = newsList.value.filter(news => news.id !== id)\r\n        return true\r\n      } else {\r\n        alert('خطا در حذف خبر: ' + res.message)\r\n        return false\r\n      }\r\n    } catch (error) {\r\n      alert('خطا در ارتباط با سرور: ' + error.message)\r\n      return false\r\n    }\r\n  }\r\n\r\n  const loadNews = async () => {\r\n  loading.value = true\r\n  try {\r\n    const res = await sendApi({ control: 'news', action: 'user_news' })\r\n    if (res.status === 'success') {\r\n      const newNewsList = res.data || []\r\n\r\n      // اگر لیست فعلی خالیه، فقط یک‌بار مقداردهی اولیه:\r\n      if (newsList.value.length === 0) {\r\n        newsList.value = newNewsList\r\n      } else {\r\n        // مقایسه جزئی برای به‌روزرسانی فقط آیتم‌هایی که واقعاً تغییر کردند:\r\n        const newList = []\r\n\r\n        newNewsList.forEach(newItem => {\r\n          const oldItem = newsList.value.find(n => n.id == newItem.id)\r\n          if (!oldItem || !isEqual(oldItem, newItem)) {\r\n            newList.push(newItem)\r\n          } else {\r\n            newList.push(oldItem) // همون رفرنس قبلی\r\n          }\r\n        })\r\n\r\n        // بررسی حذف‌شده‌ها\r\n        const deletedIds = newsList.value\r\n          .filter(old => !newNewsList.find(n => n.id == old.id))\r\n          .map(n => n.id)\r\n\r\n        if (\r\n          !isEqual(\r\n            newsList.value.map(n => n.id).sort(),\r\n            newList.map(n => n.id).sort()\r\n          )\r\n        ) {\r\n          newsList.value = newList\r\n        } else {\r\n          // فقط آیتم‌های حذف‌شده رو حذف کن:\r\n          newsList.value = newList.filter(n => !deletedIds.includes(n.id))\r\n        }\r\n      }\r\n    } else {\r\n      alert('خطا در بارگذاری اخبار: ' + res.message)\r\n    }\r\n  } catch (error) {\r\n    alert('خطا در ارتباط با سرور: ' + error.message)\r\n  }\r\n  loading.value = false\r\n}\r\n\r\n  let pollingInterval = null\r\n  const startPolling = () => {\r\n    if (pollingInterval) return\r\n    loadNews()\r\n    pollingInterval = setInterval(() => {\r\n      loadNews()\r\n    }, 10000)\r\n  }\r\n\r\n  const stopPolling = () => {\r\n    if (pollingInterval) {\r\n      clearInterval(pollingInterval)\r\n      pollingInterval = null\r\n    }\r\n  }\r\n\r\n  return {\r\n    newsList,\r\n    loading,\r\n    loadNews,\r\n    deleteNews,\r\n    restoreNews,\r\n    startPolling,\r\n    stopPolling,\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}