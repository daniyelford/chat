{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\nimport Hammer from \"hammerjs\";\nimport { useRouter } from \"vue-router\";\nexport default {\n  __name: 'TouchPage',\n  props: {\n    to: {\n      type: String,\n      required: true\n    },\n    direction: {\n      type: String,\n      default: \"left\"\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const router = useRouter();\n    const swipeArea = ref(null);\n    let hammerInstance = null;\n    onMounted(() => {\n      if (swipeArea.value) {\n        hammerInstance = new Hammer(swipeArea.value);\n        hammerInstance.on(\"swipeleft swiperight\", ev => {\n          if (props.direction === \"left\" && ev.type === \"swipeleft\") {\n            router.push(props.to);\n          }\n          if (props.direction === \"right\" && ev.type === \"swiperight\") {\n            router.push(props.to);\n          }\n        });\n      }\n    });\n    onBeforeUnmount(() => {\n      if (hammerInstance) {\n        hammerInstance.destroy();\n      }\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        ref_key: \"swipeArea\",\n        ref: swipeArea,\n        class: \"swipe-area\"\n      }, [_renderSlot(_ctx.$slots, \"default\")], 512);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","Hammer","useRouter","props","__props","router","swipeArea","hammerInstance","value","on","ev","direction","type","push","to","destroy"],"sources":["D:/GitHub/chat/vue3/src/components/tooles/touch/TouchPage.vue"],"sourcesContent":["<template>\r\n    <div ref=\"swipeArea\" class=\"swipe-area\">\r\n        <slot />\r\n    </div>\r\n</template>\r\n<script setup>\r\n    import { ref, onMounted, onBeforeUnmount } from \"vue\"\r\n    import Hammer from \"hammerjs\"\r\n    import { useRouter } from \"vue-router\"\r\n    const props = defineProps({\r\n        to: { type: String, required: true },\r\n        direction: { type: String, default: \"left\" }\r\n    })\r\n    const router = useRouter()\r\n    const swipeArea = ref(null)\r\n    let hammerInstance = null\r\n    onMounted(() => {\r\n        if (swipeArea.value) {\r\n            hammerInstance = new Hammer(swipeArea.value)\r\n            hammerInstance.on(\"swipeleft swiperight\", (ev) => {\r\n                if (props.direction === \"left\" && ev.type === \"swipeleft\") {\r\n                    router.push(props.to)\r\n                }\r\n                if (props.direction === \"right\" && ev.type === \"swiperight\") {\r\n                    router.push(props.to)\r\n                }\r\n            })\r\n        }\r\n    })\r\n    onBeforeUnmount(() => {\r\n        if (hammerInstance) {\r\n            hammerInstance.destroy()\r\n        }\r\n    })\r\n</script>\r\n<style>\r\n    .swipe-area {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>"],"mappings":";;AAMI,SAASA,GAAG,EAAEC,SAAS,EAAEC,eAAe,QAAQ,KAAK;AACrD,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,YAAY;;;;;;;;;;;;;;IACtC,MAAMC,KAAK,GAAGC,OAGZ;IACF,MAAMC,MAAM,GAAGH,SAAS,CAAC,CAAC;IAC1B,MAAMI,SAAS,GAAGR,GAAG,CAAC,IAAI,CAAC;IAC3B,IAAIS,cAAc,GAAG,IAAI;IACzBR,SAAS,CAAC,MAAM;MACZ,IAAIO,SAAS,CAACE,KAAK,EAAE;QACjBD,cAAc,GAAG,IAAIN,MAAM,CAACK,SAAS,CAACE,KAAK,CAAC;QAC5CD,cAAc,CAACE,EAAE,CAAC,sBAAsB,EAAGC,EAAE,IAAK;UAC9C,IAAIP,KAAK,CAACQ,SAAS,KAAK,MAAM,IAAID,EAAE,CAACE,IAAI,KAAK,WAAW,EAAE;YACvDP,MAAM,CAACQ,IAAI,CAACV,KAAK,CAACW,EAAE,CAAC;UACzB;UACA,IAAIX,KAAK,CAACQ,SAAS,KAAK,OAAO,IAAID,EAAE,CAACE,IAAI,KAAK,YAAY,EAAE;YACzDP,MAAM,CAACQ,IAAI,CAACV,KAAK,CAACW,EAAE,CAAC;UACzB;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACFd,eAAe,CAAC,MAAM;MAClB,IAAIO,cAAc,EAAE;QAChBA,cAAc,CAACQ,OAAO,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}