{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-box\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"progress-bar\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"preview\"\n};\nconst _hoisted_4 = [\"src\"];\nimport { ref } from 'vue';\nimport { sendApi } from '@/utils/api'; // متد دلخواه برای ارسال API\nconst MAX_FILE_SIZE_MB = 100;\nexport default {\n  __name: 'UploadManyVideos',\n  props: {\n    toAction: String,\n    url: String\n  },\n  setup(__props) {\n    const selectedFilesBase64 = ref([]);\n    const uploadedVideos = ref([]);\n    const props = __props;\n    const readProgress = ref(0);\n    const reading = ref(false);\n    function readFileAsBase64(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n        reader.readAsDataURL(file);\n      });\n    }\n    async function toBase64WithProgress(files) {\n      const base64s = [];\n      reading.value = true;\n      readProgress.value = 0;\n      try {\n        const total = files.length;\n        for (let i = 0; i < total; i++) {\n          const file = files[i];\n          const sizeInMB = file.size / (1024 * 1024);\n          if (sizeInMB > MAX_FILE_SIZE_MB) {\n            alert(`فایل ${file.name} بیشتر از ${MAX_FILE_SIZE_MB}MB است و آپلود نمی‌شود.`);\n            continue;\n          }\n          const base64 = await readFileAsBase64(file);\n          base64s.push(base64);\n          readProgress.value = (i + 1) / total * 100;\n        }\n        reading.value = false;\n        return base64s;\n      } catch (error) {\n        reading.value = false;\n        throw error;\n      }\n    }\n    const onFileChange = async e => {\n      const files = e.target.files;\n      if (!files || files.length === 0) return;\n      selectedFilesBase64.value = [];\n      uploadedVideos.value = [];\n      try {\n        selectedFilesBase64.value = await toBase64WithProgress(files);\n        await uploadAll();\n      } catch (error) {\n        console.error('خطا در خواندن فایل‌ها:', error);\n        alert('خطا در خواندن فایل‌های ویدیو.');\n      }\n    };\n    const uploadAll = async () => {\n      try {\n        const response = await sendApi({\n          action: 'upload_many_videos',\n          data: {\n            data: selectedFilesBase64.value,\n            url: props.url,\n            toAction: props.toAction\n          },\n          control: 'upload'\n        });\n        if (response.status === 'success' && Array.isArray(response.videos)) {\n          uploadedVideos.value = response.videos;\n        } else {\n          alert(response.message || 'آپلود موفق نبود');\n        }\n      } catch (err) {\n        console.error('خطا در ارسال به سرور:', err);\n        alert('مشکلی در آپلود پیش آمد');\n      }\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n        type: \"file\",\n        multiple: \"\",\n        accept: \"video/*\",\n        onChange: onFileChange\n      }, null, 32), reading.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n        class: \"progress\",\n        style: _normalizeStyle({\n          width: readProgress.value + '%'\n        })\n      }, null, 4), _createElementVNode(\"p\", null, _toDisplayString(readProgress.value.toFixed(0)) + \"%\", 1)])) : _createCommentVNode(\"\", true), uploadedVideos.value.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[0] || (_cache[0] = _createElementVNode(\"p\", null, \"ویدیوهای آپلود شده:\", -1)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(uploadedVideos.value, video => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: video.id,\n          class: \"video-wrapper\"\n        }, [_createElementVNode(\"video\", {\n          src: video.url,\n          controls: \"\",\n          style: {\n            \"max-width\": \"400px\",\n            \"max-height\": \"300px\",\n            \"margin\": \"0.5rem\"\n          }\n        }, null, 8, _hoisted_4)]);\n      }), 128))])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","sendApi","MAX_FILE_SIZE_MB","selectedFilesBase64","uploadedVideos","props","__props","readProgress","reading","readFileAsBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","toBase64WithProgress","files","base64s","value","total","length","i","sizeInMB","size","alert","name","base64","push","onFileChange","e","target","uploadAll","console","response","action","data","url","toAction","control","status","Array","isArray","videos","message","err"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/upload/UploadManyVideos.vue"],"sourcesContent":["<template>\r\n  <div class=\"upload-box\">\r\n    <input type=\"file\" multiple accept=\"video/*\" @change=\"onFileChange\" />\r\n\r\n    <!-- نمایش درصد پیشرفت خواندن فایل‌ها -->\r\n    <div v-if=\"reading\" class=\"progress-bar\">\r\n      <div class=\"progress\" :style=\"{ width: readProgress + '%' }\"></div>\r\n      <p>{{ readProgress.toFixed(0) }}%</p>\r\n    </div>\r\n\r\n    <div v-if=\"uploadedVideos.length\" class=\"preview\">\r\n      <p>ویدیوهای آپلود شده:</p>\r\n      <div v-for=\"video in uploadedVideos\" :key=\"video.id\" class=\"video-wrapper\">\r\n        <video :src=\"video.url\" controls style=\"max-width: 400px; max-height: 300px; margin: 0.5rem;\"></video>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref,defineProps } from 'vue'\r\n  import { sendApi } from '@/utils/api' // متد دلخواه برای ارسال API\r\n  const MAX_FILE_SIZE_MB = 100\r\n  const selectedFilesBase64 = ref([])\r\n  const uploadedVideos = ref([])\r\n  const props = defineProps({\r\n    toAction: String,\r\n    url: String\r\n  })\r\n  const readProgress = ref(0)\r\n  const reading = ref(false)\r\n  function readFileAsBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader()\r\n      reader.onload = () => resolve(reader.result)\r\n      reader.onerror = (error) => reject(error)\r\n      reader.readAsDataURL(file)\r\n    })\r\n  }\r\n  async function toBase64WithProgress(files) {\r\n    const base64s = []\r\n    reading.value = true\r\n    readProgress.value = 0\r\n    try {\r\n      const total = files.length\r\n      for (let i = 0; i < total; i++) {\r\n        const file = files[i]\r\n        const sizeInMB = file.size / (1024 * 1024)\r\n        if (sizeInMB > MAX_FILE_SIZE_MB) {\r\n          alert(`فایل ${file.name} بیشتر از ${MAX_FILE_SIZE_MB}MB است و آپلود نمی‌شود.`)\r\n          continue\r\n        }\r\n        const base64 = await readFileAsBase64(file)\r\n        base64s.push(base64)\r\n        readProgress.value = ((i + 1) / total) * 100\r\n      }\r\n      reading.value = false\r\n      return base64s\r\n    } catch (error) {\r\n      reading.value = false\r\n      throw error\r\n    }\r\n  }\r\n  const onFileChange = async (e) => {\r\n    const files = e.target.files\r\n    if (!files || files.length === 0) return\r\n    selectedFilesBase64.value = []\r\n    uploadedVideos.value = []\r\n    try {\r\n      selectedFilesBase64.value = await toBase64WithProgress(files)\r\n      await uploadAll()\r\n    } catch (error) {\r\n      console.error('خطا در خواندن فایل‌ها:', error)\r\n      alert('خطا در خواندن فایل‌های ویدیو.')\r\n    }\r\n  }\r\n  const uploadAll = async () => {\r\n    try {\r\n      const response = await sendApi(\r\n        {\r\n          action: 'upload_many_videos',\r\n          data: {\r\n            data:selectedFilesBase64.value,\r\n            url:props.url,\r\n            toAction:props.toAction,\r\n          },\r\n          control:'upload'\r\n        }\r\n      )\r\n      if (response.status === 'success' && Array.isArray(response.videos)) {\r\n        uploadedVideos.value = response.videos\r\n      } else {\r\n        alert(response.message || 'آپلود موفق نبود')\r\n      }\r\n    } catch (err) {\r\n      console.error('خطا در ارسال به سرور:', err)\r\n      alert('مشکلی در آپلود پیش آمد')\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.upload-box {\r\n  padding: 1rem;\r\n}\r\n.preview {\r\n  margin-top: 1rem;\r\n}\r\n.video-wrapper {\r\n  display: inline-block;\r\n  text-align: center;\r\n}\r\n\r\n/* progress bar styles */\r\n.progress-bar {\r\n  width: 100%;\r\n  background: #eee;\r\n  border: 1px solid #ccc;\r\n  margin: 10px 0;\r\n  height: 20px;\r\n  position: relative;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress {\r\n  background: #2196f3;\r\n  height: 100%;\r\n  width: 0%;\r\n  transition: width 0.2s ease;\r\n}\r\n\r\n.progress-bar p {\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  margin: 0;\r\n  font-size: 12px;\r\n  color: #000;\r\n  top: 2px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}