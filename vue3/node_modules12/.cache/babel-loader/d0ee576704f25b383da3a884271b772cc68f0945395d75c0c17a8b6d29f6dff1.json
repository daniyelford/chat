{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { defineStore } from 'pinia';\nimport { sendApi } from '@/utils/api';\nimport { useUserStore } from '@/stores/user';\nexport const useNotificationStore = defineStore('notification', {\n  state: () => ({\n    notifications: [],\n    unreadCount: 0,\n    lastId: 0\n  }),\n  actions: {\n    async fetchNotifications() {\n      const userStore = useUserStore();\n      if (!userStore.isLoggedIn) return;\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user'\n      });\n      if (res.status === 'success' && Array.isArray(res.data)) {\n        const newNotifs = res.data.filter(n => n.id > this.lastId);\n        if (newNotifs.length > 0) {\n          this.notifications = [...newNotifs, ...this.notifications];\n          this.lastId = Math.max(...this.notifications.map(n => n.id));\n          this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length;\n        }\n      }\n    },\n    markAsRead(id) {\n      const notif = this.notifications.find(n => n.id === id);\n      if (notif && notif.is_read === 'dont') {\n        notif.is_read = 'seen';\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length;\n      }\n    },\n    pushNotification(notif) {\n      const exists = this.notifications.some(n => n.id === notif.id);\n      if (!exists) {\n        this.notifications.unshift(notif);\n        if (notif.is_read === 'dont') this.unreadCount++;\n        this.lastId = Math.max(this.lastId, notif.id);\n      }\n    }\n  },\n  persist: true\n});","map":{"version":3,"names":["defineStore","sendApi","useUserStore","useNotificationStore","state","notifications","unreadCount","lastId","actions","fetchNotifications","userStore","isLoggedIn","res","action","control","status","Array","isArray","data","newNotifs","filter","n","id","length","Math","max","map","is_read","markAsRead","notif","find","pushNotification","exists","some","unshift","persist"],"sources":["D:/GitHub/ci3-vue3/vue3/src/stores/notification.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { sendApi } from '@/utils/api'\r\nimport { useUserStore } from '@/stores/user'\r\nexport const useNotificationStore = defineStore('notification', {\r\n  state: () => ({\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    lastId: 0,\r\n  }),\r\n  actions: {\r\n    async fetchNotifications() {\r\n      const userStore = useUserStore()\r\n      if (!userStore.isLoggedIn) return\r\n      const res = await sendApi({ action: 'get_notifications', control: 'user' })\r\n      if (res.status === 'success' && Array.isArray(res.data)) {\r\n        const newNotifs = res.data.filter(n => n.id > this.lastId)\r\n        if (newNotifs.length > 0) {\r\n          this.notifications = [...newNotifs, ...this.notifications]\r\n          this.lastId = Math.max(...this.notifications.map(n => n.id))\r\n          this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length\r\n        }\r\n      }\r\n    },\r\n    markAsRead(id) {\r\n      const notif = this.notifications.find(n => n.id === id)\r\n      if (notif && notif.is_read === 'dont') {\r\n        notif.is_read = 'seen'\r\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length\r\n      }\r\n    },\r\n    pushNotification(notif) {\r\n      const exists = this.notifications.some(n => n.id === notif.id)\r\n      if (!exists) {\r\n        this.notifications.unshift(notif)\r\n        if (notif.is_read === 'dont') this.unreadCount++\r\n        this.lastId = Math.max(this.lastId, notif.id)\r\n      }\r\n    }\r\n  },\r\n\r\n  persist: true\r\n})"],"mappings":";;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAY,QAAQ,eAAe;AAC5C,OAAO,MAAMC,oBAAoB,GAAGH,WAAW,CAAC,cAAc,EAAE;EAC9DI,KAAK,EAAEA,CAAA,MAAO;IACZC,aAAa,EAAE,EAAE;IACjBC,WAAW,EAAE,CAAC;IACdC,MAAM,EAAE;EACV,CAAC,CAAC;EACFC,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAA,EAAG;MACzB,MAAMC,SAAS,GAAGR,YAAY,CAAC,CAAC;MAChC,IAAI,CAACQ,SAAS,CAACC,UAAU,EAAE;MAC3B,MAAMC,GAAG,GAAG,MAAMX,OAAO,CAAC;QAAEY,MAAM,EAAE,mBAAmB;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAC3E,IAAIF,GAAG,CAACG,MAAM,KAAK,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACL,GAAG,CAACM,IAAI,CAAC,EAAE;QACvD,MAAMC,SAAS,GAAGP,GAAG,CAACM,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,GAAG,IAAI,CAACf,MAAM,CAAC;QAC1D,IAAIY,SAAS,CAACI,MAAM,GAAG,CAAC,EAAE;UACxB,IAAI,CAAClB,aAAa,GAAG,CAAC,GAAGc,SAAS,EAAE,GAAG,IAAI,CAACd,aAAa,CAAC;UAC1D,IAAI,CAACE,MAAM,GAAGiB,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACpB,aAAa,CAACqB,GAAG,CAACL,CAAC,IAAIA,CAAC,CAACC,EAAE,CAAC,CAAC;UAC5D,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACD,aAAa,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACM,OAAO,KAAK,MAAM,CAAC,CAACJ,MAAM;QAChF;MACF;IACF,CAAC;IACDK,UAAUA,CAACN,EAAE,EAAE;MACb,MAAMO,KAAK,GAAG,IAAI,CAACxB,aAAa,CAACyB,IAAI,CAACT,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;MACvD,IAAIO,KAAK,IAAIA,KAAK,CAACF,OAAO,KAAK,MAAM,EAAE;QACrCE,KAAK,CAACF,OAAO,GAAG,MAAM;QACtB,IAAI,CAACrB,WAAW,GAAG,IAAI,CAACD,aAAa,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACM,OAAO,KAAK,MAAM,CAAC,CAACJ,MAAM;MAChF;IACF,CAAC;IACDQ,gBAAgBA,CAACF,KAAK,EAAE;MACtB,MAAMG,MAAM,GAAG,IAAI,CAAC3B,aAAa,CAAC4B,IAAI,CAACZ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKO,KAAK,CAACP,EAAE,CAAC;MAC9D,IAAI,CAACU,MAAM,EAAE;QACX,IAAI,CAAC3B,aAAa,CAAC6B,OAAO,CAACL,KAAK,CAAC;QACjC,IAAIA,KAAK,CAACF,OAAO,KAAK,MAAM,EAAE,IAAI,CAACrB,WAAW,EAAE;QAChD,IAAI,CAACC,MAAM,GAAGiB,IAAI,CAACC,GAAG,CAAC,IAAI,CAAClB,MAAM,EAAEsB,KAAK,CAACP,EAAE,CAAC;MAC/C;IACF;EACF,CAAC;EAEDa,OAAO,EAAE;AACX,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}