{"ast":null,"code":"import { unref as _unref, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"dropdown\"\n};\nimport { ref, onMounted } from 'vue';\nimport NotificationList from '@/components/tooles/nav/NotificationList.vue';\nimport { BASE_URL } from '@/config';\nimport { useNotificationStore } from '@/stores/notification';\nexport default {\n  __name: 'NotificationMenu',\n  setup(__props) {\n    const logo = BASE_URL + '/assets/images/logo.png';\n    const song = BASE_URL + '/assets/song/notif.mp3';\n    const showList = ref(false);\n    const notifSound = ref(null);\n    const store = useNotificationStore();\n    function toggleList() {\n      showList.value = !showList.value;\n    }\n    function playSound() {\n      notifSound.value?.play().catch(() => {});\n    }\n    function showNativeNotification(title, body) {\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(title, {\n          body,\n          icon: logo\n        });\n        notification.onclick = () => {\n          window.focus();\n          notification.close();\n        };\n      }\n    }\n    async function pollNotifications() {\n      const prevLastId = store.lastId;\n      await store.fetchNotifications();\n      for (const notif of store.notifications) {\n        if (notif.id > prevLastId) {\n          store.lastId = notif.id;\n          playSound();\n          showNativeNotification(notif.title, notif.body);\n        }\n      }\n    }\n    onMounted(() => {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n      pollNotifications();\n      setInterval(pollNotifications, 10000);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", {\n        class: \"icon-wrapper\",\n        onClick: toggleList\n      }, [_cache[0] || (_cache[0] = _createTextVNode(\" ðŸ”” \")), _unref(store).unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString(_unref(store).unreadCount), 1)) : _createCommentVNode(\"\", true)]), showList.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(NotificationList, {\n        notifications: _unref(store).notifications,\n        onUpdate: _unref(store).markAsRead\n      }, null, 8, [\"notifications\", \"onUpdate\"])])) : _createCommentVNode(\"\", true), _createElementVNode(\"audio\", {\n        ref_key: \"notifSound\",\n        ref: notifSound,\n        src: song,\n        preload: \"auto\"\n      }, null, 512)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","NotificationList","BASE_URL","useNotificationStore","logo","song","showList","notifSound","store","toggleList","value","playSound","play","catch","showNativeNotification","title","body","Notification","permission","notification","icon","onclick","window","focus","close","pollNotifications","prevLastId","lastId","fetchNotifications","notif","notifications","id","requestPermission","setInterval"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/NotificationMenu.vue"],"sourcesContent":["<script setup>\r\n    import { ref, onMounted } from 'vue'\r\n    import NotificationList from '@/components/tooles/nav/NotificationList.vue'\r\n    import { BASE_URL } from '@/config'\r\n    import { useNotificationStore } from '@/stores/notification'\r\n    const logo = BASE_URL + '/assets/images/logo.png'\r\n    const song = BASE_URL + '/assets/song/notif.mp3'\r\n    const showList = ref(false)\r\n    const notifSound = ref(null)\r\n    const store = useNotificationStore()\r\n    function toggleList() {\r\n        showList.value = !showList.value\r\n    }\r\n    function playSound() {\r\n        notifSound.value?.play().catch(() => {})\r\n    }\r\n    function showNativeNotification(title, body) {\r\n        if (Notification.permission === 'granted') {\r\n            const notification = new Notification(title, {\r\n                body,\r\n                icon: logo\r\n            })\r\n            notification.onclick = () => {\r\n                window.focus()\r\n                notification.close()\r\n            }\r\n        }\r\n    }\r\n    async function pollNotifications() {\r\n        const prevLastId = store.lastId\r\n        await store.fetchNotifications()\r\n        for (const notif of store.notifications) {\r\n            if (notif.id > prevLastId) {\r\n            store.lastId = notif.id\r\n                playSound()\r\n                showNativeNotification(notif.title, notif.body)\r\n            }\r\n        }\r\n    }\r\n    onMounted(() => {\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission()\r\n        }\r\n        pollNotifications()\r\n        setInterval(pollNotifications, 10000)\r\n    })\r\n</script>\r\n<template>\r\n  <div>\r\n    <div class=\"icon-wrapper\" @click=\"toggleList\">\r\n      ðŸ””\r\n      <span class=\"badge\" v-if=\"store.unreadCount > 0\">\r\n        {{ store.unreadCount }}\r\n      </span>\r\n    </div>\r\n    <div class=\"dropdown\" v-if=\"showList\">\r\n      <NotificationList\r\n        :notifications=\"store.notifications\"\r\n        @update=\"store.markAsRead\"\r\n      />\r\n    </div>\r\n    <audio ref=\"notifSound\" :src=\"song\" preload=\"auto\"></audio>\r\n  </div>\r\n</template>\r\n<style scoped>\r\n    .icon-wrapper {\r\n        font-size: 24px;\r\n    }\r\n    .badge {\r\n        position: absolute;\r\n        top: -6px;\r\n        right: -6px;\r\n        background-color: red;\r\n        color: white;\r\n        border-radius: 50%;\r\n        padding: 2px 6px;\r\n        font-size: 12px;\r\n    }\r\n    .dropdown {\r\n        position: fixed;\r\n        top: 60px;\r\n        left: 0;\r\n        width: 300px;\r\n        background: white;\r\n        border-radius: 10px;\r\n        box-shadow: 0 0 5px rgba(0,0,0,0.2);\r\n    }\r\n</style>"],"mappings":";;;;;;;;;AACI,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,gBAAgB,MAAM,8CAA8C;AAC3E,SAASC,QAAQ,QAAQ,UAAU;AACnC,SAASC,oBAAoB,QAAQ,uBAAuB;;;;IAC5D,MAAMC,IAAI,GAAGF,QAAQ,GAAG,yBAAyB;IACjD,MAAMG,IAAI,GAAGH,QAAQ,GAAG,wBAAwB;IAChD,MAAMI,QAAQ,GAAGP,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAMQ,UAAU,GAAGR,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMS,KAAK,GAAGL,oBAAoB,CAAC,CAAC;IACpC,SAASM,UAAUA,CAAA,EAAG;MAClBH,QAAQ,CAACI,KAAK,GAAG,CAACJ,QAAQ,CAACI,KAAK;IACpC;IACA,SAASC,SAASA,CAAA,EAAG;MACjBJ,UAAU,CAACG,KAAK,EAAEE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5C;IACA,SAASC,sBAAsBA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACzC,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACvC,MAAMC,YAAY,GAAG,IAAIF,YAAY,CAACF,KAAK,EAAE;UACzCC,IAAI;UACJI,IAAI,EAAEhB;QACV,CAAC,CAAC;QACFe,YAAY,CAACE,OAAO,GAAG,MAAM;UACzBC,MAAM,CAACC,KAAK,CAAC,CAAC;UACdJ,YAAY,CAACK,KAAK,CAAC,CAAC;QACxB,CAAC;MACL;IACJ;IACA,eAAeC,iBAAiBA,CAAA,EAAG;MAC/B,MAAMC,UAAU,GAAGlB,KAAK,CAACmB,MAAM;MAC/B,MAAMnB,KAAK,CAACoB,kBAAkB,CAAC,CAAC;MAChC,KAAK,MAAMC,KAAK,IAAIrB,KAAK,CAACsB,aAAa,EAAE;QACrC,IAAID,KAAK,CAACE,EAAE,GAAGL,UAAU,EAAE;UAC3BlB,KAAK,CAACmB,MAAM,GAAGE,KAAK,CAACE,EAAE;UACnBpB,SAAS,CAAC,CAAC;UACXG,sBAAsB,CAACe,KAAK,CAACd,KAAK,EAAEc,KAAK,CAACb,IAAI,CAAC;QACnD;MACJ;IACJ;IACAhB,SAAS,CAAC,MAAM;MACZ,IAAIiB,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACvCD,YAAY,CAACe,iBAAiB,CAAC,CAAC;MACpC;MACAP,iBAAiB,CAAC,CAAC;MACnBQ,WAAW,CAACR,iBAAiB,EAAE,KAAK,CAAC;IACzC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}