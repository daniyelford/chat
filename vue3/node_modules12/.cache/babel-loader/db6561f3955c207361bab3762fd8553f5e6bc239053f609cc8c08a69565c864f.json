{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notification-wrapper\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"dropdown\"\n};\nimport { ref, onMounted } from 'vue';\nimport NotificationList from '@/components/tooles/nav/NotificationList.vue';\nimport { sendApi } from '@/utils/api';\nimport { BASE_URL } from '@/config';\nexport default {\n  __name: 'NotificationMenu',\n  setup(__props) {\n    const logo = BASE_URL + '/assets/images/logo.png';\n    const song = BASE_URL + '/assets/song/notif.mp3';\n    const showList = ref(false);\n    const unreadCount = ref(0);\n    const lastNotificationId = ref(0);\n    const notifSound = ref(null);\n    function toggleList() {\n      showList.value = !showList.value;\n    }\n    function playSound() {\n      notifSound.value?.play().catch(() => {});\n    }\n    function showNativeNotification(title, body) {\n      if (Notification.permission === 'granted') {\n        const notification = new Notification(title, {\n          body,\n          icon: logo\n        });\n        notification.onclick = () => {\n          window.focus();\n          notification.close();\n        };\n      }\n    }\n    async function fetchUnreadCount() {\n      const res = await sendApi({\n        action: 'get_notifications_counts',\n        control: 'user'\n      });\n      if (res.status === 'success') {\n        unreadCount.value = res.data;\n      }\n    }\n    async function pollNotifications() {\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user'\n      });\n      if (res.status === 'success' && Array.isArray(res.data)) {\n        for (const notif of res.data) {\n          if (notif.id > lastNotificationId.value) {\n            lastNotificationId.value = notif.id;\n            playSound();\n            showNativeNotification(notif.title, notif.body);\n            fetchUnreadCount();\n          }\n        }\n      }\n    }\n    function updateCount() {\n      fetchUnreadCount();\n    }\n    onMounted(() => {\n      if (Notification.permission === 'default') {\n        Notification.requestPermission();\n      }\n      fetchUnreadCount();\n      pollNotifications();\n      setInterval(fetchUnreadCount, 30000);\n      setInterval(pollNotifications, 10000);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n        class: \"icon-wrapper\",\n        onClick: toggleList\n      }, [_cache[0] || (_cache[0] = _createTextVNode(\" ðŸ”” \")), unreadCount.value > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(unreadCount.value), 1)) : _createCommentVNode(\"\", true)]), showList.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(NotificationList, {\n        onRead: updateCount\n      })])) : _createCommentVNode(\"\", true), _createElementVNode(\"audio\", {\n        ref_key: \"notifSound\",\n        ref: notifSound,\n        src: song,\n        preload: \"auto\"\n      }, null, 512)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","NotificationList","sendApi","BASE_URL","logo","song","showList","unreadCount","lastNotificationId","notifSound","toggleList","value","playSound","play","catch","showNativeNotification","title","body","Notification","permission","notification","icon","onclick","window","focus","close","fetchUnreadCount","res","action","control","status","data","pollNotifications","Array","isArray","notif","id","updateCount","requestPermission","setInterval"],"sources":["D:/GitHub/ci3-vue3/vue3/src/components/tooles/nav/NotificationMenu.vue"],"sourcesContent":["<template>\r\n    <div class=\"notification-wrapper\">\r\n        <div class=\"icon-wrapper\" @click=\"toggleList\">\r\n            ðŸ””\r\n            <span class=\"badge\" v-if=\"unreadCount > 0\">{{ unreadCount }}</span>\r\n        </div>\r\n        <div class=\"dropdown\" v-if=\"showList\">\r\n            <NotificationList @read=\"updateCount\" />\r\n        </div>\r\n        <audio ref=\"notifSound\" :src=\"song\" preload=\"auto\"></audio>\r\n    </div>\r\n</template>\r\n<script setup>\r\n    import { ref, onMounted } from 'vue'\r\n    import NotificationList from '@/components/tooles/nav/NotificationList.vue'\r\n    import { sendApi } from '@/utils/api'\r\n    import { BASE_URL } from '@/config';\r\n    const logo = BASE_URL+'/assets/images/logo.png'\r\n    const song = BASE_URL+'/assets/song/notif.mp3'\r\n    const showList = ref(false)\r\n    const unreadCount = ref(0)\r\n    const lastNotificationId = ref(0)\r\n    const notifSound = ref(null)\r\n    function toggleList() {\r\n        showList.value = !showList.value\r\n    }\r\n    function playSound() {\r\n        notifSound.value?.play().catch(() => {})\r\n    }\r\n    function showNativeNotification(title, body) {\r\n        if (Notification.permission === 'granted') {\r\n            const notification = new Notification(title, {\r\n                body,\r\n                icon: logo\r\n            })\r\n            notification.onclick = () => {\r\n                window.focus()\r\n                notification.close()\r\n            }\r\n        }\r\n    }\r\n    async function fetchUnreadCount() {\r\n        const res = await sendApi({ action: 'get_notifications_counts', control: 'user' })\r\n        if (res.status === 'success') {\r\n            unreadCount.value = res.data\r\n        }\r\n    }\r\n    async function pollNotifications() {\r\n        const res = await sendApi({ action: 'get_notifications', control: 'user' })\r\n        if (res.status === 'success' && Array.isArray(res.data)) {\r\n            for (const notif of res.data) {\r\n                if (notif.id > lastNotificationId.value) {\r\n                    lastNotificationId.value = notif.id\r\n                    playSound()\r\n                    showNativeNotification(notif.title, notif.body)\r\n                    fetchUnreadCount()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function updateCount() {\r\n        fetchUnreadCount()\r\n    }\r\n    onMounted(() => {\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission()\r\n        }\r\n        fetchUnreadCount()\r\n        pollNotifications()\r\n        setInterval(fetchUnreadCount, 30000)\r\n        setInterval(pollNotifications, 10000)\r\n    })\r\n</script>\r\n<style scoped>\r\n    .notification-wrapper {\r\n        position: relative;\r\n        display: inline-block;\r\n    }\r\n    .icon-wrapper {\r\n        position: relative;\r\n        font-size: 24px;\r\n        cursor: pointer;\r\n    }\r\n    .badge {\r\n        position: absolute;\r\n        top: -6px;\r\n        right: -6px;\r\n        background-color: red;\r\n        color: white;\r\n        border-radius: 50%;\r\n        padding: 2px 6px;\r\n        font-size: 12px;\r\n    }\r\n    .dropdown {\r\n        position: absolute;\r\n        top: 35px;\r\n        right: 0;\r\n        width: 300px;\r\n        background: white;\r\n        border-radius: 10px;\r\n        box-shadow: 0 0 5px rgba(0,0,0,0.2);\r\n        z-index: 10;\r\n    }\r\n</style>"],"mappings":";;;;;;;;;;;;AAaI,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,gBAAgB,MAAM,8CAA8C;AAC3E,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,QAAQ,UAAU;;;;IACnC,MAAMC,IAAI,GAAGD,QAAQ,GAAC,yBAAyB;IAC/C,MAAME,IAAI,GAAGF,QAAQ,GAAC,wBAAwB;IAC9C,MAAMG,QAAQ,GAAGP,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAMQ,WAAW,GAAGR,GAAG,CAAC,CAAC,CAAC;IAC1B,MAAMS,kBAAkB,GAAGT,GAAG,CAAC,CAAC,CAAC;IACjC,MAAMU,UAAU,GAAGV,GAAG,CAAC,IAAI,CAAC;IAC5B,SAASW,UAAUA,CAAA,EAAG;MAClBJ,QAAQ,CAACK,KAAK,GAAG,CAACL,QAAQ,CAACK,KAAK;IACpC;IACA,SAASC,SAASA,CAAA,EAAG;MACjBH,UAAU,CAACE,KAAK,EAAEE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5C;IACA,SAASC,sBAAsBA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACzC,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACvC,MAAMC,YAAY,GAAG,IAAIF,YAAY,CAACF,KAAK,EAAE;UACzCC,IAAI;UACJI,IAAI,EAAEjB;QACV,CAAC,CAAC;QACFgB,YAAY,CAACE,OAAO,GAAG,MAAM;UACzBC,MAAM,CAACC,KAAK,CAAC,CAAC;UACdJ,YAAY,CAACK,KAAK,CAAC,CAAC;QACxB,CAAC;MACL;IACJ;IACA,eAAeC,gBAAgBA,CAAA,EAAG;MAC9B,MAAMC,GAAG,GAAG,MAAMzB,OAAO,CAAC;QAAE0B,MAAM,EAAE,0BAA0B;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAClF,IAAIF,GAAG,CAACG,MAAM,KAAK,SAAS,EAAE;QAC1BvB,WAAW,CAACI,KAAK,GAAGgB,GAAG,CAACI,IAAI;MAChC;IACJ;IACA,eAAeC,iBAAiBA,CAAA,EAAG;MAC/B,MAAML,GAAG,GAAG,MAAMzB,OAAO,CAAC;QAAE0B,MAAM,EAAE,mBAAmB;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAC3E,IAAIF,GAAG,CAACG,MAAM,KAAK,SAAS,IAAIG,KAAK,CAACC,OAAO,CAACP,GAAG,CAACI,IAAI,CAAC,EAAE;QACrD,KAAK,MAAMI,KAAK,IAAIR,GAAG,CAACI,IAAI,EAAE;UAC1B,IAAII,KAAK,CAACC,EAAE,GAAG5B,kBAAkB,CAACG,KAAK,EAAE;YACrCH,kBAAkB,CAACG,KAAK,GAAGwB,KAAK,CAACC,EAAE;YACnCxB,SAAS,CAAC,CAAC;YACXG,sBAAsB,CAACoB,KAAK,CAACnB,KAAK,EAAEmB,KAAK,CAAClB,IAAI,CAAC;YAC/CS,gBAAgB,CAAC,CAAC;UACtB;QACJ;MACJ;IACJ;IACA,SAASW,WAAWA,CAAA,EAAG;MACnBX,gBAAgB,CAAC,CAAC;IACtB;IACA1B,SAAS,CAAC,MAAM;MACZ,IAAIkB,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACvCD,YAAY,CAACoB,iBAAiB,CAAC,CAAC;MACpC;MACAZ,gBAAgB,CAAC,CAAC;MAClBM,iBAAiB,CAAC,CAAC;MACnBO,WAAW,CAACb,gBAAgB,EAAE,KAAK,CAAC;MACpCa,WAAW,CAACP,iBAAiB,EAAE,KAAK,CAAC;IACzC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}