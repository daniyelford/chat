{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { defineStore } from 'pinia';\nimport { sendApi } from '@/utils/api';\nimport { useUserStore } from '@/stores/user';\nexport const useNotificationStore = defineStore('notification', {\n  state: () => ({\n    notifications: [],\n    unreadCount: 0,\n    lastId: 0\n  }),\n  actions: {\n    async fetchNotifications({\n      limit = 10,\n      offset = 0\n    } = {}) {\n      const userStore = useUserStore();\n      if (!userStore.isLoggedIn) return {\n        items: [],\n        has_more: false\n      };\n      const res = await sendApi({\n        action: 'get_notifications',\n        control: 'user',\n        data: {\n          limit,\n          offset\n        }\n      });\n      if (res.status === 'success' && Array.isArray(res.data)) {\n        const newData = res.data;\n        if (offset === 0) {\n          this.notifications = [...newData];\n        } else {\n          const existingIds = new Set(this.notifications.map(n => n.id));\n          const filteredNew = newData.filter(n => !existingIds.has(n.id));\n          this.notifications.push(...filteredNew);\n        }\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length;\n        this.lastId = Math.max(0, ...this.notifications.map(n => parseInt(n.id)));\n        return {\n          items: newData,\n          has_more: res.has_more === true\n        };\n      }\n      return {\n        items: [],\n        has_more: false\n      };\n    },\n    markAsRead(id) {\n      const notif = this.notifications.find(n => n.id === id);\n      if (notif && notif.is_read === 'dont') {\n        notif.is_read = 'seen';\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length;\n        sendApi({\n          action: 'read_notifications',\n          control: 'user',\n          data: id\n        });\n      }\n    },\n    pushNotification(newNotif) {\n      const exists = this.notifications.some(n => n.id === newNotif.id);\n      if (!exists) {\n        this.notifications.unshift(newNotif);\n        if (newNotif.is_read === 'dont') {\n          this.unreadCount++;\n        }\n        this.lastId = Math.max(this.lastId, parseInt(newNotif.id));\n      }\n    }\n  },\n  persist: true\n});","map":{"version":3,"names":["defineStore","sendApi","useUserStore","useNotificationStore","state","notifications","unreadCount","lastId","actions","fetchNotifications","limit","offset","userStore","isLoggedIn","items","has_more","res","action","control","data","status","Array","isArray","newData","existingIds","Set","map","n","id","filteredNew","filter","has","push","is_read","length","Math","max","parseInt","markAsRead","notif","find","pushNotification","newNotif","exists","some","unshift","persist"],"sources":["D:/GitHub/chat/vue3/src/stores/notification.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { sendApi } from '@/utils/api'\r\nimport { useUserStore } from '@/stores/user'\r\nexport const useNotificationStore = defineStore('notification', {\r\n  state: () => ({\r\n    notifications: [],\r\n    unreadCount: 0,\r\n    lastId: 0,\r\n  }),\r\n  actions: {\r\n    async fetchNotifications({ limit = 10, offset = 0 } = {}) {\r\n      const userStore = useUserStore()\r\n      if (!userStore.isLoggedIn) return { items: [], has_more: false }\r\n      const res = await sendApi({\r\n        action: 'get_notifications',\r\n        control: 'user',\r\n        data: { limit, offset }\r\n      })\r\n      if (res.status === 'success' && Array.isArray(res.data)) {\r\n        const newData = res.data\r\n        if (offset === 0) {\r\n          this.notifications = [...newData]\r\n        } else {\r\n          const existingIds = new Set(this.notifications.map(n => n.id))\r\n          const filteredNew = newData.filter(n => !existingIds.has(n.id))\r\n          this.notifications.push(...filteredNew)\r\n        }\r\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length\r\n        this.lastId = Math.max(0, ...this.notifications.map(n => parseInt(n.id)))\r\n        return {\r\n          items: newData,\r\n          has_more: res.has_more === true,\r\n        }\r\n      }\r\n      return { items: [], has_more: false }\r\n    },\r\n    markAsRead(id) {\r\n      const notif = this.notifications.find(n => n.id === id)\r\n      if (notif && notif.is_read === 'dont') {\r\n        notif.is_read = 'seen'\r\n        this.unreadCount = this.notifications.filter(n => n.is_read === 'dont').length\r\n        sendApi({\r\n          action: 'read_notifications',\r\n          control: 'user',\r\n          data: id\r\n        })\r\n      }\r\n    },\r\n    pushNotification(newNotif) {\r\n      const exists = this.notifications.some(n => n.id === newNotif.id)\r\n      if (!exists) {\r\n        this.notifications.unshift(newNotif)\r\n        if (newNotif.is_read === 'dont') {\r\n          this.unreadCount++\r\n        }\r\n        this.lastId = Math.max(this.lastId, parseInt(newNotif.id))\r\n      }\r\n    },\r\n  },\r\n  persist: true,\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}