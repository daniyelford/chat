{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, watch, nextTick, onBeforeUnmount } from 'vue';\nexport function useInfiniteScroll(fetchFn, {\n  limit = 10,\n  total = null,\n  // می‌تونه ref یا عدد ساده باشه\n  immediate = true\n} = {}) {\n  const items = ref([]);\n  const loading = ref(false);\n  const offset = ref(0);\n  const canLoadMore = ref(true);\n  const loadMoreTrigger = ref(null);\n  let observer = null;\n\n  // اگر total واکنشگراست، watch کن\n  if (total && typeof total === 'object' && 'value' in total) {\n    watch(total, newVal => {\n      canLoadMore.value = items.value.length < newVal;\n    });\n  }\n  const loadMore = async () => {\n    if (loading.value || !canLoadMore.value) return;\n    loading.value = true;\n    try {\n      const result = await fetchFn({\n        limit,\n        offset: offset.value\n      });\n      const newItems = Array.isArray(result) ? result : [];\n      items.value.push(...newItems);\n      offset.value += newItems.length;\n      const totalValue = typeof total === 'object' && total !== null && 'value' in total ? total.value : typeof total === 'number' ? total : null;\n      canLoadMore.value = !(newItems.length < limit || typeof totalValue === 'number' && items.value.length >= totalValue);\n    } catch (error) {\n      console.error('Error loading more items:', error);\n    } finally {\n      loading.value = false;\n    }\n  };\n  const setupObserver = async () => {\n    if (observer) observer.disconnect();\n    observer = new IntersectionObserver(async ([entry]) => {\n      if (entry.isIntersecting && canLoadMore.value && !loading.value) {\n        await loadMore();\n      }\n    }, {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.5 // کمتر کردم برای اطمینان\n    });\n    await nextTick();\n    if (loadMoreTrigger.value) {\n      observer.observe(loadMoreTrigger.value);\n    } else {\n      console.warn('⚠️ loadMoreTrigger هنوز mount نشده.');\n    }\n  };\n\n  // حذف watch(loadMoreTrigger) برای جلوگیری از observe چندباره\n\n  // watch(loadMoreTrigger, (el) => {\n  //     if (el && observer) {\n  //         observer.observe(el)\n  //     }\n  // })\n\n  onBeforeUnmount(() => {\n    if (observer) observer.disconnect();\n  });\n  if (immediate) loadMore();\n  return {\n    items,\n    loading,\n    canLoadMore,\n    loadMore,\n    loadMoreTrigger,\n    setupObserver\n  };\n}","map":{"version":3,"names":["ref","watch","nextTick","onBeforeUnmount","useInfiniteScroll","fetchFn","limit","total","immediate","items","loading","offset","canLoadMore","loadMoreTrigger","observer","newVal","value","length","loadMore","result","newItems","Array","isArray","push","totalValue","error","console","setupObserver","disconnect","IntersectionObserver","entry","isIntersecting","root","rootMargin","threshold","observe","warn"],"sources":["D:/GitHub/ci3-vue3/vue3/src/composables/useInfiniteScroll.js"],"sourcesContent":["import { ref, watch, nextTick, onBeforeUnmount } from 'vue'\r\n\r\nexport function useInfiniteScroll(fetchFn, {\r\n    limit = 10,\r\n    total = null,  // می‌تونه ref یا عدد ساده باشه\r\n    immediate = true,\r\n} = {}) {\r\n    const items = ref([])\r\n    const loading = ref(false)\r\n    const offset = ref(0)\r\n    const canLoadMore = ref(true)\r\n    const loadMoreTrigger = ref(null)\r\n    let observer = null\r\n\r\n    // اگر total واکنشگراست، watch کن\r\n    if (total && typeof total === 'object' && 'value' in total) {\r\n        watch(total, (newVal) => {\r\n            canLoadMore.value = items.value.length < newVal\r\n        })\r\n    }\r\n\r\n    const loadMore = async () => {\r\n        if (loading.value || !canLoadMore.value) return\r\n\r\n        loading.value = true\r\n\r\n        try {\r\n            const result = await fetchFn({ limit, offset: offset.value })\r\n            const newItems = Array.isArray(result) ? result : []\r\n\r\n            items.value.push(...newItems)\r\n            offset.value += newItems.length\r\n\r\n            const totalValue = (typeof total === 'object' && total !== null && 'value' in total)\r\n                ? total.value\r\n                : (typeof total === 'number' ? total : null)\r\n\r\n            canLoadMore.value =\r\n                !(newItems.length < limit || (typeof totalValue === 'number' && items.value.length >= totalValue))\r\n        } catch (error) {\r\n            console.error('Error loading more items:', error)\r\n        } finally {\r\n            loading.value = false\r\n        }\r\n    }\r\n\r\n    const setupObserver = async () => {\r\n        if (observer) observer.disconnect()\r\n\r\n        observer = new IntersectionObserver(async ([entry]) => {\r\n            if (entry.isIntersecting && canLoadMore.value && !loading.value) {\r\n                await loadMore()\r\n            }\r\n        }, {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.5, // کمتر کردم برای اطمینان\r\n        })\r\n\r\n        await nextTick()\r\n\r\n        if (loadMoreTrigger.value) {\r\n            observer.observe(loadMoreTrigger.value)\r\n        } else {\r\n            console.warn('⚠️ loadMoreTrigger هنوز mount نشده.')\r\n        }\r\n    }\r\n\r\n    // حذف watch(loadMoreTrigger) برای جلوگیری از observe چندباره\r\n\r\n    // watch(loadMoreTrigger, (el) => {\r\n    //     if (el && observer) {\r\n    //         observer.observe(el)\r\n    //     }\r\n    // })\r\n\r\n\r\n    onBeforeUnmount(() => {\r\n        if (observer) observer.disconnect()\r\n    })\r\n\r\n    if (immediate) loadMore()\r\n\r\n    return {\r\n        items,\r\n        loading,\r\n        canLoadMore,\r\n        loadMore,\r\n        loadMoreTrigger,\r\n        setupObserver,\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}